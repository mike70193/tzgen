// Code generated by tzgen - DO NOT EDIT.
// This file is a binding generated from Simple smart contract at address KT1CiYNu9iJknnL31TXBWHCqRdFRh7jPWdzg.
// Any manual changes will be lost.

package contracts

import (
	"context"
	"encoding/json"
	"math/big"
	"time"

	"blockwatch.cc/tzgo/contract"
	"blockwatch.cc/tzgo/micheline"
	"blockwatch.cc/tzgo/rpc"
	"blockwatch.cc/tzgo/tezos"

	"github.com/jeanschmitt/tzgen/pkg/either"
	"github.com/jeanschmitt/tzgen/pkg/option"
	"github.com/jeanschmitt/tzgen/pkg/tzgoext"
	"github.com/pkg/errors"
)

// Simple is a generated binding to a Tezos smart contract.
type Simple struct {
	*contract.Contract
	builder SimpleBuilder
}

// SimpleSession is a generated binding to a Tezos smart contract, that will
// use Opts for every call.
type SimpleSession struct {
	*Simple
	Opts *rpc.CallOptions
}

// SimpleBuilder is a generated struct that builds micheline.Parameters from
// go types.
type SimpleBuilder struct{}

// NewSimple creates a new Simple handle, bound to the provided address
// with the given rpc.
func NewSimple(address tezos.Address, client *rpc.Client) *Simple {
	return &Simple{
		Contract: contract.NewContract(address, client),
	}
}

// Session returns a new SimpleSession with the configured rpc.CallOptions.
func (_s *Simple) Session(opts *rpc.CallOptions) *SimpleSession {
	return &SimpleSession{Simple: _s, Opts: opts}
}

// NewSimpleBuilder returns a new SimpleBuilder.
func NewSimpleBuilder() SimpleBuilder {
	return SimpleBuilder{}
}

// Storage queries the current storage of the contract.
func (_s *Simple) Storage(ctx context.Context) *big.Int {
	return nil
}

// DeploySimple deploys a Simple contract by using client and opts, and SimpleMicheline.
//
// Returns the receipt and a handle to the Simple deployed contract.
func DeploySimple(ctx context.Context, opts *rpc.CallOptions, client *rpc.Client, storage *big.Int) (*rpc.Receipt, *Simple, error) {
	var script *micheline.Script
	err := json.Unmarshal([]byte(SimpleMicheline), &script)
	if err != nil {
		return nil, nil, errors.Wrap(err, "failed to unmarshall contract's script")
	}

	prim, err := tzgoext.MarshalPrim(storage)
	if err != nil {
		return nil, nil, errors.Wrap(err, "failed to marshal storage")
	}
	script.Storage = prim

	c := contract.NewEmptyContract(client).WithScript(script)
	receipt, err := c.Deploy(ctx, opts)
	if err != nil {
		return nil, nil, errors.Wrap(err, "failed to deploy contract")
	}
	return receipt, &Simple{Contract: c}, nil
}

// region Entrypoints

// Add makes a call to the `add` contract entry.
//
// add(nat0 nat)
func (_s *Simple) Add(ctx context.Context, opts *rpc.CallOptions, nat0 *big.Int) (*rpc.Receipt, error) {
	params, err := _s.builder.Add(nat0)
	if err != nil {
		return nil, err
	}
	return _s.Call(ctx, &contract.TxArgs{Params: params}, opts)
}

// Add makes a call to the `add` contract entry.
//
// add(nat0 nat)
func (_s *SimpleSession) Add(ctx context.Context, nat0 *big.Int) (*rpc.Receipt, error) {
	return _s.Simple.Add(ctx, _s.Opts, nat0)
}

// Add builds `add` contract entry's parameters.
//
// add(nat0 nat)
func (_s SimpleBuilder) Add(nat0 *big.Int) (micheline.Parameters, error) {
	prim, err := tzgoext.MarshalParams(nat0)
	if err != nil {
		return micheline.Parameters{}, errors.Wrap(err, "failed to marshal params")
	}
	return micheline.Parameters{Entrypoint: "add", Value: prim}, nil
}

// Inc makes a call to the `inc` contract entry.
//
// inc()
func (_s *Simple) Inc(ctx context.Context, opts *rpc.CallOptions) (*rpc.Receipt, error) {
	params, err := _s.builder.Inc()
	if err != nil {
		return nil, err
	}
	return _s.Call(ctx, &contract.TxArgs{Params: params}, opts)
}

// Inc makes a call to the `inc` contract entry.
//
// inc()
func (_s *SimpleSession) Inc(ctx context.Context) (*rpc.Receipt, error) {
	return _s.Simple.Inc(ctx, _s.Opts)
}

// Inc builds `inc` contract entry's parameters.
//
// inc()
func (_s SimpleBuilder) Inc() (micheline.Parameters, error) {
	prim, err := tzgoext.MarshalParams()
	if err != nil {
		return micheline.Parameters{}, errors.Wrap(err, "failed to marshal params")
	}
	return micheline.Parameters{Entrypoint: "inc", Value: prim}, nil
}

// Reset makes a call to the `reset` contract entry.
//
// reset()
func (_s *Simple) Reset(ctx context.Context, opts *rpc.CallOptions) (*rpc.Receipt, error) {
	params, err := _s.builder.Reset()
	if err != nil {
		return nil, err
	}
	return _s.Call(ctx, &contract.TxArgs{Params: params}, opts)
}

// Reset makes a call to the `reset` contract entry.
//
// reset()
func (_s *SimpleSession) Reset(ctx context.Context) (*rpc.Receipt, error) {
	return _s.Simple.Reset(ctx, _s.Opts)
}

// Reset builds `reset` contract entry's parameters.
//
// reset()
func (_s SimpleBuilder) Reset() (micheline.Parameters, error) {
	prim, err := tzgoext.MarshalParams()
	if err != nil {
		return micheline.Parameters{}, errors.Wrap(err, "failed to marshal params")
	}
	return micheline.Parameters{Entrypoint: "reset", Value: prim}, nil
}

// endregion

// region Getters

// GetCounter gets the result of the `get_counter` TZIP-4 view.
//
// get_counter()
func (_s *Simple) GetCounter(ctx context.Context) (*big.Int, error) {
	var res *big.Int
	params, err := _s.builder.GetCounter()
	prim, err := _s.RunView(ctx, params.Entrypoint, params.Value)
	if err != nil {
		return res, err
	}
	if err = tzgoext.UnmarshalPrim(prim, &res); err != nil {
		return res, errors.Wrap(err, "failed to unmarshal res")
	}
	return res, nil
}

// GetCounter builds `get_counter` TZIP-4 view's parameters.
//
// get_counter()
func (_s SimpleBuilder) GetCounter() (micheline.Parameters, error) {
	prim, err := tzgoext.MarshalParams()
	if err != nil {
		return micheline.Parameters{}, errors.Wrap(err, "failed to marshal params")
	}
	return micheline.Parameters{Entrypoint: "get_counter", Value: prim}, nil
}

// endregion

const SimpleMicheline = `{"code":[{"prim":"parameter","args":[{"prim":"or","args":[{"prim":"or","args":[{"prim":"pair","annots":["%get_counter"],"args":[{"prim":"unit"},{"prim":"contract","annots":["%callback"],"args":[{"prim":"nat"}]}]},{"prim":"nat","annots":["%add"]}]},{"prim":"or","args":[{"prim":"unit","annots":["%inc"]},{"prim":"unit","annots":["%reset"]}]}]}]},{"prim":"storage","args":[{"prim":"nat"}]},{"prim":"code","args":[[{"prim":"NIL","args":[{"prim":"operation"}]},{"prim":"DIG","args":[{"int":"1"}]},{"prim":"UNPAIR"},{"prim":"IF_LEFT","args":[[{"prim":"IF_LEFT","args":[[{"prim":"UNPAIR"},{"prim":"DROP"},{"prim":"DUP","args":[{"int":"3"}]},{"prim":"DUP","args":[{"int":"2"}]},{"prim":"AMOUNT"},{"prim":"DUP","args":[{"int":"5"}]},{"prim":"TRANSFER_TOKENS"},{"prim":"CONS"},{"prim":"DIP","args":[[{"prim":"DIG","args":[{"int":"2"}]},{"prim":"DROP"}]]},{"prim":"DUG","args":[{"int":"2"}]},{"prim":"DROP"},{"prim":"DIG","args":[{"int":"1"}]},{"prim":"PAIR"}],[{"prim":"DUP"},{"prim":"DUP","args":[{"int":"3"}]},{"prim":"ADD"},{"prim":"DIP","args":[[{"prim":"DIG","args":[{"int":"1"}]},{"prim":"DROP"}]]},{"prim":"DUG","args":[{"int":"1"}]},{"prim":"DROP"},{"prim":"DIG","args":[{"int":"1"}]},{"prim":"PAIR"}]]}],[{"prim":"IF_LEFT","args":[[{"prim":"DROP"},{"prim":"PUSH","args":[{"prim":"nat"},{"int":"1"}]},{"prim":"DUP","args":[{"int":"2"}]},{"prim":"ADD"},{"prim":"SWAP"},{"prim":"DROP"},{"prim":"DIG","args":[{"int":"1"}]},{"prim":"PAIR"}],[{"prim":"DROP"},{"prim":"PUSH","args":[{"prim":"nat"},{"int":"0"}]},{"prim":"SWAP"},{"prim":"DROP"},{"prim":"DIG","args":[{"int":"1"}]},{"prim":"PAIR"}]]}]]}]]}],"storage":{}}`

var (
	_ = big.NewInt
	_ = either.Left[int, int]
	_ = micheline.NewPrim
	_ = option.Some[int]
	_ = time.Now
)
