// Code generated by tzgen - DO NOT EDIT.
// This file is a binding generated from Simple smart contract at address KT1CiYNu9iJknnL31TXBWHCqRdFRh7jPWdzg.
// Any manual changes will be lost.

package contracts

import (
	"context"
	"math/big"

	"blockwatch.cc/tzgo/contract"
	"blockwatch.cc/tzgo/micheline"
	"blockwatch.cc/tzgo/rpc"
	"blockwatch.cc/tzgo/tezos"

	"github.com/jeanschmitt/tzgen/pkg/either"
	"github.com/jeanschmitt/tzgen/pkg/option"
	"github.com/jeanschmitt/tzgen/pkg/tzgoext"
	"github.com/pkg/errors"
)

type Simple struct {
	*contract.Contract
	// Default signer to use when sending transactions.
	// Can be overridden in entrypoints' opts argument.
	signer *tzgoext.Signer
}

func NewSimple(address tezos.Address, client *rpc.Client) *Simple {
	return &Simple{
		Contract: contract.NewContract(address, client),
	}
}

func (_s *Simple) SetSigner(signer *tzgoext.Signer) *Simple {
	_s.signer = signer
	return _s
}

func (_s *Simple) source() tezos.Address {
	if _s.signer == nil {
		return tezos.Address{}
	}
	addr, _ := _s.signer.Address(context.Background())
	return addr
}

// region Entrypoints

// Add is a contract entry.
// add(nat0 nat)
func (_s *Simple) Add(ctx context.Context, opts *contract.CallOptions, nat0 *big.Int) (*rpc.Receipt, error) {
	prim, err := tzgoext.MarshalParams(nat0)
	if err != nil {
		return nil, errors.Wrap(err, "failed to marshal params")
	}
	return _s.Contract.Call(ctx, &tzgoext.CallArgs{
		TxArgs:     contract.TxArgs{Destination: _s.Address(), Source: _s.source()},
		Entrypoint: "add",
		Value:      prim,
	}, opts)
}

// Inc is a contract entry.
// inc()
func (_s *Simple) Inc(ctx context.Context, opts *contract.CallOptions) (*rpc.Receipt, error) {
	prim, err := tzgoext.MarshalParams()
	if err != nil {
		return nil, errors.Wrap(err, "failed to marshal params")
	}
	return _s.Contract.Call(ctx, &tzgoext.CallArgs{
		TxArgs:     contract.TxArgs{Destination: _s.Address(), Source: _s.source()},
		Entrypoint: "inc",
		Value:      prim,
	}, opts)
}

// Reset is a contract entry.
// reset()
func (_s *Simple) Reset(ctx context.Context, opts *contract.CallOptions) (*rpc.Receipt, error) {
	prim, err := tzgoext.MarshalParams()
	if err != nil {
		return nil, errors.Wrap(err, "failed to marshal params")
	}
	return _s.Contract.Call(ctx, &tzgoext.CallArgs{
		TxArgs:     contract.TxArgs{Destination: _s.Address(), Source: _s.source()},
		Entrypoint: "reset",
		Value:      prim,
	}, opts)
}

// endregion

// region Getters

// GetCounter is a TZIP-4 view.
// get_counter()
func (_s *Simple) GetCounter(ctx context.Context) (v *big.Int, err error) {
	prim, err := tzgoext.MarshalParams()
	if err != nil {
		return v, errors.Wrap(err, "failed to marshal params")
	}
	res, err := _s.Contract.RunView(ctx, "get_counter", prim)
	if err != nil {
		return v, err
	}
	if err = tzgoext.UnmarshalPrim(res, &v); err != nil {
		return v, errors.Wrap(err, "failed to unmarshal res")
	}
	return v, nil
}

// endregion

const SimpleMicheline = `{"code":[{"prim":"parameter","args":[{"prim":"or","args":[{"prim":"or","args":[{"prim":"pair","args":[{"prim":"unit"},{"prim":"contract","args":[{"prim":"nat"}],"annots":["%callback"]}],"annots":["%get_counter"]},{"prim":"nat","annots":["%add"]}]},{"prim":"or","args":[{"prim":"unit","annots":["%inc"]},{"prim":"unit","annots":["%reset"]}]}]}]},{"prim":"storage","args":[{"prim":"nat"}]},{"prim":"code","args":[[{"prim":"NIL","args":[{"prim":"operation"}]},{"prim":"DIG","args":[{"int":"1"}]},{"prim":"UNPAIR"},{"prim":"IF_LEFT","args":[[{"prim":"IF_LEFT","args":[[{"prim":"UNPAIR"},{"prim":"DROP"},{"prim":"DUP","args":[{"int":"3"}]},{"prim":"DUP","args":[{"int":"2"}]},{"prim":"AMOUNT"},{"prim":"DUP","args":[{"int":"5"}]},{"prim":"TRANSFER_TOKENS"},{"prim":"CONS"},{"prim":"DIP","args":[[{"prim":"DIG","args":[{"int":"2"}]},{"prim":"DROP"}]]},{"prim":"DUG","args":[{"int":"2"}]},{"prim":"DROP"},{"prim":"DIG","args":[{"int":"1"}]},{"prim":"PAIR"}],[{"prim":"DUP"},{"prim":"DUP","args":[{"int":"3"}]},{"prim":"ADD"},{"prim":"DIP","args":[[{"prim":"DIG","args":[{"int":"1"}]},{"prim":"DROP"}]]},{"prim":"DUG","args":[{"int":"1"}]},{"prim":"DROP"},{"prim":"DIG","args":[{"int":"1"}]},{"prim":"PAIR"}]]}],[{"prim":"IF_LEFT","args":[[{"prim":"DROP"},{"prim":"PUSH","args":[{"prim":"nat"},{"int":"1"}]},{"prim":"DUP","args":[{"int":"2"}]},{"prim":"ADD"},{"prim":"SWAP"},{"prim":"DROP"},{"prim":"DIG","args":[{"int":"1"}]},{"prim":"PAIR"}],[{"prim":"DROP"},{"prim":"PUSH","args":[{"prim":"nat"},{"int":"0"}]},{"prim":"SWAP"},{"prim":"DROP"},{"prim":"DIG","args":[{"int":"1"}]},{"prim":"PAIR"}]]}]]}]]}],"storage":{"int":"1"}}
`

var (
	_ = big.NewInt
	_ = either.Left[int, int]
	_ = micheline.NewPrim
	_ = option.Some[int]
)
