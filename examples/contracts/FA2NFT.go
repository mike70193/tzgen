// Code generated by tzgen - DO NOT EDIT.
// This file is a binding generated from FA2NFT smart contract at address KT1UvFD9hwgbLKbmTzUPmVRVsHG29ciQrcwE.
// Any manual changes will be lost.

package contracts

import (
	"context"
	"encoding/json"
	"math/big"
	"time"

	"blockwatch.cc/tzgo/contract"
	"blockwatch.cc/tzgo/micheline"
	"blockwatch.cc/tzgo/rpc"
	"blockwatch.cc/tzgo/tezos"
	"github.com/pkg/errors"

	"github.com/mike70193/tzgen/pkg/bind"
)

// FA2NFT is a generated binding to a Tezos smart contract.
type FA2NFT struct {
	bind.Contract
	builder FA2NFTBuilder
	rpc     bind.RPC
	script  *micheline.Script
}

// FA2NFTSession is a generated binding to a Tezos smart contract, that will
// use Opts for every call.
type FA2NFTSession struct {
	*FA2NFT
	Opts *rpc.CallOptions
}

// FA2NFTBuilder is a generated struct that builds micheline.Parameters from
// go types.
type FA2NFTBuilder struct{}

// NewFA2NFT creates a new FA2NFT handle, bound to the provided address
// with the given rpc.
//
// Returns an error if the contract was not found at the given address.
func NewFA2NFT(ctx context.Context, address tezos.Address, client *rpc.Client) (*FA2NFT, error) {
	script, err := client.GetContractScript(ctx, address)
	if err != nil {
		return nil, err
	}

	return &FA2NFT{
		Contract: contract.NewContract(address, client),
		rpc:      client,
		script:   script,
	}, nil
}

// Session returns a new FA2NFTSession with the configured rpc.CallOptions.
func (_f *FA2NFT) Session(opts *rpc.CallOptions) *FA2NFTSession {
	return &FA2NFTSession{FA2NFT: _f, Opts: opts}
}

// Builder returns the builder struct for this contract.
func (_f *FA2NFT) Builder() FA2NFTBuilder {
	return _f.builder
}

// Storage queries the current storage of the contract.
func (_f *FA2NFT) Storage(ctx context.Context) (*FA2NFTStorage, error) {
	return _f.StorageAt(ctx, rpc.Head)
}

// StorageAt queries the contract's storage at the given block.
func (_f *FA2NFT) StorageAt(ctx context.Context, block rpc.BlockID) (*FA2NFTStorage, error) {
	var storage *FA2NFTStorage
	prim, err := _f.rpc.GetContractStorage(ctx, _f.Contract.Address(), block)
	if err != nil {
		return storage, errors.Wrap(err, "failed to get storage")
	}
	prim = micheline.NewSeq(prim.UnfoldPairRecursive(_f.script.StorageType())...)
	err = bind.UnmarshalPrim(prim, &storage)
	if err != nil {
		return storage, errors.Wrap(err, "failed to unmarshal storage")
	}
	storage.TokenMetadata.SetRPC(_f.rpc)
	storage.Ledger.SetRPC(_f.rpc)
	storage.Royalties.SetRPC(_f.rpc)
	storage.Operator.SetRPC(_f.rpc)
	storage.OperatorForAll.SetRPC(_f.rpc)
	storage.Metadata.SetRPC(_f.rpc)
	return storage, nil
}

// DeployFA2NFT deploys a FA2NFT contract by using client and opts, and FA2NFTMicheline.
//
// Returns the receipt and a handle to the FA2NFT deployed contract.
func DeployFA2NFT(ctx context.Context, opts *rpc.CallOptions, client *rpc.Client, storage *FA2NFTStorage) (*rpc.Receipt, *FA2NFT, error) {
	var script *micheline.Script
	err := json.Unmarshal([]byte(FA2NFTMicheline), &script)
	if err != nil {
		return nil, nil, errors.Wrap(err, "failed to unmarshall contract's script")
	}

	prim, err := bind.MarshalPrim(storage, false)
	if err != nil {
		return nil, nil, errors.Wrap(err, "failed to marshal storage")
	}
	script.Storage = prim

	c := contract.NewEmptyContract(client).WithScript(script)
	receipt, err := c.Deploy(ctx, opts)
	if err != nil {
		return nil, nil, errors.Wrap(err, "failed to deploy contract")
	}
	return receipt, &FA2NFT{Contract: c, rpc: client}, nil
}

// region Entrypoints

// DeclareOwnership makes a call to the `declare_ownership` contract entry.
//
// declare_ownership(address0 address)
func (_f *FA2NFT) DeclareOwnership(ctx context.Context, opts *rpc.CallOptions, address0 tezos.Address) (*rpc.Receipt, error) {
	params, err := _f.builder.DeclareOwnership(address0)
	if err != nil {
		return nil, err
	}
	return _f.Contract.Call(ctx, &contract.TxArgs{Params: params}, opts)
}

// DeclareOwnership makes a call to the `declare_ownership` contract entry.
//
// declare_ownership(address0 address)
func (_f *FA2NFTSession) DeclareOwnership(ctx context.Context, address0 tezos.Address) (*rpc.Receipt, error) {
	return _f.FA2NFT.DeclareOwnership(ctx, _f.Opts, address0)
}

// DeclareOwnership builds `declare_ownership` contract entry's parameters.
//
// declare_ownership(address0 address)
func (FA2NFTBuilder) DeclareOwnership(address0 tezos.Address) (micheline.Parameters, error) {
	prim, err := bind.MarshalParams(false, address0)
	if err != nil {
		return micheline.Parameters{}, errors.Wrap(err, "failed to marshal params")
	}
	return micheline.Parameters{Entrypoint: FA2NFTDeclareOwnershipEntry, Value: prim}, nil
}

// ClaimOwnership makes a call to the `claim_ownership` contract entry.
//
// claim_ownership()
func (_f *FA2NFT) ClaimOwnership(ctx context.Context, opts *rpc.CallOptions) (*rpc.Receipt, error) {
	params, err := _f.builder.ClaimOwnership()
	if err != nil {
		return nil, err
	}
	return _f.Contract.Call(ctx, &contract.TxArgs{Params: params}, opts)
}

// ClaimOwnership makes a call to the `claim_ownership` contract entry.
//
// claim_ownership()
func (_f *FA2NFTSession) ClaimOwnership(ctx context.Context) (*rpc.Receipt, error) {
	return _f.FA2NFT.ClaimOwnership(ctx, _f.Opts)
}

// ClaimOwnership builds `claim_ownership` contract entry's parameters.
//
// claim_ownership()
func (FA2NFTBuilder) ClaimOwnership() (micheline.Parameters, error) {
	prim, err := bind.MarshalParams(false)
	if err != nil {
		return micheline.Parameters{}, errors.Wrap(err, "failed to marshal params")
	}
	return micheline.Parameters{Entrypoint: FA2NFTClaimOwnershipEntry, Value: prim}, nil
}

// Pause makes a call to the `pause` contract entry.
//
// pause()
func (_f *FA2NFT) Pause(ctx context.Context, opts *rpc.CallOptions) (*rpc.Receipt, error) {
	params, err := _f.builder.Pause()
	if err != nil {
		return nil, err
	}
	return _f.Contract.Call(ctx, &contract.TxArgs{Params: params}, opts)
}

// Pause makes a call to the `pause` contract entry.
//
// pause()
func (_f *FA2NFTSession) Pause(ctx context.Context) (*rpc.Receipt, error) {
	return _f.FA2NFT.Pause(ctx, _f.Opts)
}

// Pause builds `pause` contract entry's parameters.
//
// pause()
func (FA2NFTBuilder) Pause() (micheline.Parameters, error) {
	prim, err := bind.MarshalParams(false)
	if err != nil {
		return micheline.Parameters{}, errors.Wrap(err, "failed to marshal params")
	}
	return micheline.Parameters{Entrypoint: FA2NFTPauseEntry, Value: prim}, nil
}

// Unpause makes a call to the `unpause` contract entry.
//
// unpause()
func (_f *FA2NFT) Unpause(ctx context.Context, opts *rpc.CallOptions) (*rpc.Receipt, error) {
	params, err := _f.builder.Unpause()
	if err != nil {
		return nil, err
	}
	return _f.Contract.Call(ctx, &contract.TxArgs{Params: params}, opts)
}

// Unpause makes a call to the `unpause` contract entry.
//
// unpause()
func (_f *FA2NFTSession) Unpause(ctx context.Context) (*rpc.Receipt, error) {
	return _f.FA2NFT.Unpause(ctx, _f.Opts)
}

// Unpause builds `unpause` contract entry's parameters.
//
// unpause()
func (FA2NFTBuilder) Unpause() (micheline.Parameters, error) {
	prim, err := bind.MarshalParams(false)
	if err != nil {
		return micheline.Parameters{}, errors.Wrap(err, "failed to marshal params")
	}
	return micheline.Parameters{Entrypoint: FA2NFTUnpauseEntry, Value: prim}, nil
}

// SetMetadata makes a call to the `set_metadata` contract entry.
//
// set_metadata(k string, d option<bytes>)
func (_f *FA2NFT) SetMetadata(ctx context.Context, opts *rpc.CallOptions, k string, d bind.Option[[]byte]) (*rpc.Receipt, error) {
	params, err := _f.builder.SetMetadata(k, d)
	if err != nil {
		return nil, err
	}
	return _f.Contract.Call(ctx, &contract.TxArgs{Params: params}, opts)
}

// SetMetadata makes a call to the `set_metadata` contract entry.
//
// set_metadata(k string, d option<bytes>)
func (_f *FA2NFTSession) SetMetadata(ctx context.Context, k string, d bind.Option[[]byte]) (*rpc.Receipt, error) {
	return _f.FA2NFT.SetMetadata(ctx, _f.Opts, k, d)
}

// SetMetadata builds `set_metadata` contract entry's parameters.
//
// set_metadata(k string, d option<bytes>)
func (FA2NFTBuilder) SetMetadata(k string, d bind.Option[[]byte]) (micheline.Parameters, error) {
	prim, err := bind.MarshalParams(false, k, d)
	if err != nil {
		return micheline.Parameters{}, errors.Wrap(err, "failed to marshal params")
	}
	return micheline.Parameters{Entrypoint: FA2NFTSetMetadataEntry, Value: prim}, nil
}

// SetTokenMetadata makes a call to the `set_token_metadata` contract entry.
//
// set_token_metadata(tid nat, tdata map)
func (_f *FA2NFT) SetTokenMetadata(ctx context.Context, opts *rpc.CallOptions, tid *big.Int, tdata bind.Map[string, []byte]) (*rpc.Receipt, error) {
	params, err := _f.builder.SetTokenMetadata(tid, tdata)
	if err != nil {
		return nil, err
	}
	return _f.Contract.Call(ctx, &contract.TxArgs{Params: params}, opts)
}

// SetTokenMetadata makes a call to the `set_token_metadata` contract entry.
//
// set_token_metadata(tid nat, tdata map)
func (_f *FA2NFTSession) SetTokenMetadata(ctx context.Context, tid *big.Int, tdata bind.Map[string, []byte]) (*rpc.Receipt, error) {
	return _f.FA2NFT.SetTokenMetadata(ctx, _f.Opts, tid, tdata)
}

// SetTokenMetadata builds `set_token_metadata` contract entry's parameters.
//
// set_token_metadata(tid nat, tdata map)
func (FA2NFTBuilder) SetTokenMetadata(tid *big.Int, tdata bind.Map[string, []byte]) (micheline.Parameters, error) {
	prim, err := bind.MarshalParams(false, tid, tdata)
	if err != nil {
		return micheline.Parameters{}, errors.Wrap(err, "failed to marshal params")
	}
	return micheline.Parameters{Entrypoint: FA2NFTSetTokenMetadataEntry, Value: prim}, nil
}

// SetPermits makes a call to the `set_permits` contract entry.
//
// set_permits(address0 address)
func (_f *FA2NFT) SetPermits(ctx context.Context, opts *rpc.CallOptions, address0 tezos.Address) (*rpc.Receipt, error) {
	params, err := _f.builder.SetPermits(address0)
	if err != nil {
		return nil, err
	}
	return _f.Contract.Call(ctx, &contract.TxArgs{Params: params}, opts)
}

// SetPermits makes a call to the `set_permits` contract entry.
//
// set_permits(address0 address)
func (_f *FA2NFTSession) SetPermits(ctx context.Context, address0 tezos.Address) (*rpc.Receipt, error) {
	return _f.FA2NFT.SetPermits(ctx, _f.Opts, address0)
}

// SetPermits builds `set_permits` contract entry's parameters.
//
// set_permits(address0 address)
func (FA2NFTBuilder) SetPermits(address0 tezos.Address) (micheline.Parameters, error) {
	prim, err := bind.MarshalParams(false, address0)
	if err != nil {
		return micheline.Parameters{}, errors.Wrap(err, "failed to marshal params")
	}
	return micheline.Parameters{Entrypoint: FA2NFTSetPermitsEntry, Value: prim}, nil
}

// UpdateOperators makes a call to the `update_operators` contract entry.
//
// update_operators(list0 list)
func (_f *FA2NFT) UpdateOperators(ctx context.Context, opts *rpc.CallOptions, list0 []bind.Or[*FA2NFTAddOperator, *FA2NFTRemoveOperator]) (*rpc.Receipt, error) {
	params, err := _f.builder.UpdateOperators(list0)
	if err != nil {
		return nil, err
	}
	return _f.Contract.Call(ctx, &contract.TxArgs{Params: params}, opts)
}

// UpdateOperators makes a call to the `update_operators` contract entry.
//
// update_operators(list0 list)
func (_f *FA2NFTSession) UpdateOperators(ctx context.Context, list0 []bind.Or[*FA2NFTAddOperator, *FA2NFTRemoveOperator]) (*rpc.Receipt, error) {
	return _f.FA2NFT.UpdateOperators(ctx, _f.Opts, list0)
}

// UpdateOperators builds `update_operators` contract entry's parameters.
//
// update_operators(list0 list)
func (FA2NFTBuilder) UpdateOperators(list0 []bind.Or[*FA2NFTAddOperator, *FA2NFTRemoveOperator]) (micheline.Parameters, error) {
	prim, err := bind.MarshalParams(false, list0)
	if err != nil {
		return micheline.Parameters{}, errors.Wrap(err, "failed to marshal params")
	}
	return micheline.Parameters{Entrypoint: FA2NFTUpdateOperatorsEntry, Value: prim}, nil
}

// UpdateOperatorsForAll makes a call to the `update_operators_for_all` contract entry.
//
// update_operators_for_all(list0 list)
func (_f *FA2NFT) UpdateOperatorsForAll(ctx context.Context, opts *rpc.CallOptions, list0 []bind.Or[tezos.Address, tezos.Address]) (*rpc.Receipt, error) {
	params, err := _f.builder.UpdateOperatorsForAll(list0)
	if err != nil {
		return nil, err
	}
	return _f.Contract.Call(ctx, &contract.TxArgs{Params: params}, opts)
}

// UpdateOperatorsForAll makes a call to the `update_operators_for_all` contract entry.
//
// update_operators_for_all(list0 list)
func (_f *FA2NFTSession) UpdateOperatorsForAll(ctx context.Context, list0 []bind.Or[tezos.Address, tezos.Address]) (*rpc.Receipt, error) {
	return _f.FA2NFT.UpdateOperatorsForAll(ctx, _f.Opts, list0)
}

// UpdateOperatorsForAll builds `update_operators_for_all` contract entry's parameters.
//
// update_operators_for_all(list0 list)
func (FA2NFTBuilder) UpdateOperatorsForAll(list0 []bind.Or[tezos.Address, tezos.Address]) (micheline.Parameters, error) {
	prim, err := bind.MarshalParams(false, list0)
	if err != nil {
		return micheline.Parameters{}, errors.Wrap(err, "failed to marshal params")
	}
	return micheline.Parameters{Entrypoint: FA2NFTUpdateOperatorsForAllEntry, Value: prim}, nil
}

// DoTransfer makes a call to the `do_transfer` contract entry.
//
// do_transfer(list0 list)
func (_f *FA2NFT) DoTransfer(ctx context.Context, opts *rpc.CallOptions, list0 []*FA2NFTRecord11) (*rpc.Receipt, error) {
	params, err := _f.builder.DoTransfer(list0)
	if err != nil {
		return nil, err
	}
	return _f.Contract.Call(ctx, &contract.TxArgs{Params: params}, opts)
}

// DoTransfer makes a call to the `do_transfer` contract entry.
//
// do_transfer(list0 list)
func (_f *FA2NFTSession) DoTransfer(ctx context.Context, list0 []*FA2NFTRecord11) (*rpc.Receipt, error) {
	return _f.FA2NFT.DoTransfer(ctx, _f.Opts, list0)
}

// DoTransfer builds `do_transfer` contract entry's parameters.
//
// do_transfer(list0 list)
func (FA2NFTBuilder) DoTransfer(list0 []*FA2NFTRecord11) (micheline.Parameters, error) {
	prim, err := bind.MarshalParams(false, list0)
	if err != nil {
		return micheline.Parameters{}, errors.Wrap(err, "failed to marshal params")
	}
	return micheline.Parameters{Entrypoint: FA2NFTDoTransferEntry, Value: prim}, nil
}

// TransferGasless makes a call to the `transfer_gasless` contract entry.
//
// transfer_gasless(list0 list)
func (_f *FA2NFT) TransferGasless(ctx context.Context, opts *rpc.CallOptions, list0 []*FA2NFTRecord12) (*rpc.Receipt, error) {
	params, err := _f.builder.TransferGasless(list0)
	if err != nil {
		return nil, err
	}
	return _f.Contract.Call(ctx, &contract.TxArgs{Params: params}, opts)
}

// TransferGasless makes a call to the `transfer_gasless` contract entry.
//
// transfer_gasless(list0 list)
func (_f *FA2NFTSession) TransferGasless(ctx context.Context, list0 []*FA2NFTRecord12) (*rpc.Receipt, error) {
	return _f.FA2NFT.TransferGasless(ctx, _f.Opts, list0)
}

// TransferGasless builds `transfer_gasless` contract entry's parameters.
//
// transfer_gasless(list0 list)
func (FA2NFTBuilder) TransferGasless(list0 []*FA2NFTRecord12) (micheline.Parameters, error) {
	prim, err := bind.MarshalParams(false, list0)
	if err != nil {
		return micheline.Parameters{}, errors.Wrap(err, "failed to marshal params")
	}
	return micheline.Parameters{Entrypoint: FA2NFTTransferGaslessEntry, Value: prim}, nil
}

// Transfer makes a call to the `transfer` contract entry.
//
// transfer(list0 list)
func (_f *FA2NFT) Transfer(ctx context.Context, opts *rpc.CallOptions, list0 []*FA2NFTRecord11) (*rpc.Receipt, error) {
	params, err := _f.builder.Transfer(list0)
	if err != nil {
		return nil, err
	}
	return _f.Contract.Call(ctx, &contract.TxArgs{Params: params}, opts)
}

// Transfer makes a call to the `transfer` contract entry.
//
// transfer(list0 list)
func (_f *FA2NFTSession) Transfer(ctx context.Context, list0 []*FA2NFTRecord11) (*rpc.Receipt, error) {
	return _f.FA2NFT.Transfer(ctx, _f.Opts, list0)
}

// Transfer builds `transfer` contract entry's parameters.
//
// transfer(list0 list)
func (FA2NFTBuilder) Transfer(list0 []*FA2NFTRecord11) (micheline.Parameters, error) {
	prim, err := bind.MarshalParams(false, list0)
	if err != nil {
		return micheline.Parameters{}, errors.Wrap(err, "failed to marshal params")
	}
	return micheline.Parameters{Entrypoint: FA2NFTTransferEntry, Value: prim}, nil
}

// Mint makes a call to the `mint` contract entry.
//
// mint(tow address, tid nat, tmd map, roy list)
func (_f *FA2NFT) Mint(ctx context.Context, opts *rpc.CallOptions, tow tezos.Address, tid *big.Int, tmd bind.Map[string, []byte], roy []*FA2NFTRecord1) (*rpc.Receipt, error) {
	params, err := _f.builder.Mint(tow, tid, tmd, roy)
	if err != nil {
		return nil, err
	}
	return _f.Contract.Call(ctx, &contract.TxArgs{Params: params}, opts)
}

// Mint makes a call to the `mint` contract entry.
//
// mint(tow address, tid nat, tmd map, roy list)
func (_f *FA2NFTSession) Mint(ctx context.Context, tow tezos.Address, tid *big.Int, tmd bind.Map[string, []byte], roy []*FA2NFTRecord1) (*rpc.Receipt, error) {
	return _f.FA2NFT.Mint(ctx, _f.Opts, tow, tid, tmd, roy)
}

// Mint builds `mint` contract entry's parameters.
//
// mint(tow address, tid nat, tmd map, roy list)
func (FA2NFTBuilder) Mint(tow tezos.Address, tid *big.Int, tmd bind.Map[string, []byte], roy []*FA2NFTRecord1) (micheline.Parameters, error) {
	prim, err := bind.MarshalParams(false, tow, tid, tmd, roy)
	if err != nil {
		return micheline.Parameters{}, errors.Wrap(err, "failed to marshal params")
	}
	return micheline.Parameters{Entrypoint: FA2NFTMintEntry, Value: prim}, nil
}

// Burn makes a call to the `burn` contract entry.
//
// burn(nat0 nat)
func (_f *FA2NFT) Burn(ctx context.Context, opts *rpc.CallOptions, nat0 *big.Int) (*rpc.Receipt, error) {
	params, err := _f.builder.Burn(nat0)
	if err != nil {
		return nil, err
	}
	return _f.Contract.Call(ctx, &contract.TxArgs{Params: params}, opts)
}

// Burn makes a call to the `burn` contract entry.
//
// burn(nat0 nat)
func (_f *FA2NFTSession) Burn(ctx context.Context, nat0 *big.Int) (*rpc.Receipt, error) {
	return _f.FA2NFT.Burn(ctx, _f.Opts, nat0)
}

// Burn builds `burn` contract entry's parameters.
//
// burn(nat0 nat)
func (FA2NFTBuilder) Burn(nat0 *big.Int) (micheline.Parameters, error) {
	prim, err := bind.MarshalParams(false, nat0)
	if err != nil {
		return micheline.Parameters{}, errors.Wrap(err, "failed to marshal params")
	}
	return micheline.Parameters{Entrypoint: FA2NFTBurnEntry, Value: prim}, nil
}

// endregion

// region Getters

// BalanceOf gets the result of the `balance_of` TZIP-4 view.
//
// balance_of(requests list)
func (_f *FA2NFT) BalanceOf(ctx context.Context, requests []*FA2NFTRecord5) ([]*FA2NFTRecord7, error) {
	var res []*FA2NFTRecord7
	params, err := _f.builder.BalanceOf(requests)
	prim, err := _f.Contract.RunView(ctx, params.Entrypoint, params.Value)
	if err != nil {
		return res, err
	}
	if err = bind.UnmarshalPrim(prim, &res); err != nil {
		return res, errors.Wrap(err, "failed to unmarshal res")
	}
	return res, nil
}

// BalanceOf builds `balance_of` TZIP-4 view's parameters.
//
// balance_of(requests list)
func (FA2NFTBuilder) BalanceOf(requests []*FA2NFTRecord5) (micheline.Parameters, error) {
	prim, err := bind.MarshalParams(false, requests)
	if err != nil {
		return micheline.Parameters{}, errors.Wrap(err, "failed to marshal params")
	}
	return micheline.Parameters{Entrypoint: FA2NFTBalanceOfEntry, Value: prim}, nil
}

// endregion

// FA2NFTRecord0 is a generated struct used to interact with FA2NFT smart contract.
type FA2NFTRecord0 struct {
	TokenId   *big.Int
	TokenInfo bind.Map[string, []byte]
}

// MarshalPrim marshals FA2NFTRecord0 into a Prim.
func (_f *FA2NFTRecord0) MarshalPrim(optimized bool) (micheline.Prim, error) {
	return bind.MarshalParams(optimized, _f.TokenId, _f.TokenInfo)
}

// UnmarshalPrim unmarshals a Prim into a FA2NFTRecord0.
func (_f *FA2NFTRecord0) UnmarshalPrim(prim micheline.Prim) error {
	return bind.UnmarshalPrimPaths(prim, map[string]any{"l": &_f.TokenId, "r": &_f.TokenInfo})
}

// FA2NFTRecord1 is a generated struct used to interact with FA2NFT smart contract.
type FA2NFTRecord1 struct {
	PartAccount tezos.Address
	PartValue   *big.Int
}

// MarshalPrim marshals FA2NFTRecord1 into a Prim.
func (_f *FA2NFTRecord1) MarshalPrim(optimized bool) (micheline.Prim, error) {
	return bind.MarshalParams(optimized, _f.PartAccount, _f.PartValue)
}

// UnmarshalPrim unmarshals a Prim into a FA2NFTRecord1.
func (_f *FA2NFTRecord1) UnmarshalPrim(prim micheline.Prim) error {
	return bind.UnmarshalPrimPaths(prim, map[string]any{"l": &_f.PartAccount, "r": &_f.PartValue})
}

// FA2NFTRecord2 is a generated struct used to interact with FA2NFT smart contract.
type FA2NFTRecord2 struct {
	Field0 tezos.Address
	Field1 *big.Int
	Field2 tezos.Address
}

// MarshalPrim marshals FA2NFTRecord2 into a Prim.
func (_f *FA2NFTRecord2) MarshalPrim(optimized bool) (micheline.Prim, error) {
	return bind.MarshalParams(optimized, _f.Field0, _f.Field1, _f.Field2)
}

// UnmarshalPrim unmarshals a Prim into a FA2NFTRecord2.
func (_f *FA2NFTRecord2) UnmarshalPrim(prim micheline.Prim) error {
	return bind.UnmarshalPrimPaths(prim, map[string]any{"l": &_f.Field0, "r/l": &_f.Field1, "r/r": &_f.Field2})
}

// FA2NFTRecord3 is a generated struct used to interact with FA2NFT smart contract.
type FA2NFTRecord3 struct {
	Field0 tezos.Address
	Field1 tezos.Address
}

// MarshalPrim marshals FA2NFTRecord3 into a Prim.
func (_f *FA2NFTRecord3) MarshalPrim(optimized bool) (micheline.Prim, error) {
	return bind.MarshalParams(optimized, _f.Field0, _f.Field1)
}

// UnmarshalPrim unmarshals a Prim into a FA2NFTRecord3.
func (_f *FA2NFTRecord3) UnmarshalPrim(prim micheline.Prim) error {
	return bind.UnmarshalPrimPaths(prim, map[string]any{"l": &_f.Field0, "r": &_f.Field1})
}

// FA2NFTStorage is a generated struct used to interact with FA2NFT smart contract.
type FA2NFTStorage struct {
	Owner          tezos.Address
	Permits        tezos.Address
	OwnerCandidate bind.Option[tezos.Address]
	Paused         bool
	TokenMetadata  bind.Bigmap[*big.Int, *FA2NFTRecord0]
	Ledger         bind.Bigmap[*big.Int, tezos.Address]
	Royalties      bind.Bigmap[*big.Int, []*FA2NFTRecord1]
	Operator       bind.Bigmap[*FA2NFTRecord2, struct{}]
	OperatorForAll bind.Bigmap[*FA2NFTRecord3, struct{}]
	Metadata       bind.Bigmap[string, []byte]
}

// MarshalPrim marshals FA2NFTStorage into a Prim.
func (_f *FA2NFTStorage) MarshalPrim(optimized bool) (micheline.Prim, error) {
	return bind.MarshalParams(optimized, _f.Owner, _f.Permits, _f.OwnerCandidate, _f.Paused, _f.TokenMetadata, _f.Ledger, _f.Royalties, _f.Operator, _f.OperatorForAll, _f.Metadata)
}

// UnmarshalPrim unmarshals a Prim into a FA2NFTStorage.
func (_f *FA2NFTStorage) UnmarshalPrim(prim micheline.Prim) error {
	return bind.UnmarshalPrimPaths(prim, map[string]any{"0": &_f.Owner, "1": &_f.Permits, "2": &_f.OwnerCandidate, "3": &_f.Paused, "4": &_f.TokenMetadata, "5": &_f.Ledger, "6": &_f.Royalties, "7": &_f.Operator, "8": &_f.OperatorForAll, "9": &_f.Metadata})
}

// FA2NFTRecord5 is a generated struct used to interact with FA2NFT smart contract.
type FA2NFTRecord5 struct {
	Owner   tezos.Address
	TokenId *big.Int
}

// MarshalPrim marshals FA2NFTRecord5 into a Prim.
func (_f *FA2NFTRecord5) MarshalPrim(optimized bool) (micheline.Prim, error) {
	return bind.MarshalParams(optimized, _f.Owner, _f.TokenId)
}

// UnmarshalPrim unmarshals a Prim into a FA2NFTRecord5.
func (_f *FA2NFTRecord5) UnmarshalPrim(prim micheline.Prim) error {
	return bind.UnmarshalPrimPaths(prim, map[string]any{"l": &_f.Owner, "r": &_f.TokenId})
}

// FA2NFTRequest is a generated struct used to interact with FA2NFT smart contract.
type FA2NFTRequest struct {
	Owner   tezos.Address
	TokenId *big.Int
}

// MarshalPrim marshals FA2NFTRequest into a Prim.
func (_f *FA2NFTRequest) MarshalPrim(optimized bool) (micheline.Prim, error) {
	return bind.MarshalParams(optimized, _f.Owner, _f.TokenId)
}

// UnmarshalPrim unmarshals a Prim into a FA2NFTRequest.
func (_f *FA2NFTRequest) UnmarshalPrim(prim micheline.Prim) error {
	return bind.UnmarshalPrimPaths(prim, map[string]any{"l": &_f.Owner, "r": &_f.TokenId})
}

// FA2NFTRecord7 is a generated struct used to interact with FA2NFT smart contract.
type FA2NFTRecord7 struct {
	Request *FA2NFTRequest
	Balance *big.Int
}

// MarshalPrim marshals FA2NFTRecord7 into a Prim.
func (_f *FA2NFTRecord7) MarshalPrim(optimized bool) (micheline.Prim, error) {
	return bind.MarshalParams(optimized, _f.Request, _f.Balance)
}

// UnmarshalPrim unmarshals a Prim into a FA2NFTRecord7.
func (_f *FA2NFTRecord7) UnmarshalPrim(prim micheline.Prim) error {
	return bind.UnmarshalPrimPaths(prim, map[string]any{"l": &_f.Request, "r": &_f.Balance})
}

// FA2NFTAddOperator is a generated struct used to interact with FA2NFT smart contract.
type FA2NFTAddOperator struct {
	Owner    tezos.Address
	Operator tezos.Address
	TokenId  *big.Int
}

// MarshalPrim marshals FA2NFTAddOperator into a Prim.
func (_f *FA2NFTAddOperator) MarshalPrim(optimized bool) (micheline.Prim, error) {
	return bind.MarshalParams(optimized, _f.Owner, _f.Operator, _f.TokenId)
}

// UnmarshalPrim unmarshals a Prim into a FA2NFTAddOperator.
func (_f *FA2NFTAddOperator) UnmarshalPrim(prim micheline.Prim) error {
	return bind.UnmarshalPrimPaths(prim, map[string]any{"l": &_f.Owner, "r/l": &_f.Operator, "r/r": &_f.TokenId})
}

// FA2NFTRemoveOperator is a generated struct used to interact with FA2NFT smart contract.
type FA2NFTRemoveOperator struct {
	Owner    tezos.Address
	Operator tezos.Address
	TokenId  *big.Int
}

// MarshalPrim marshals FA2NFTRemoveOperator into a Prim.
func (_f *FA2NFTRemoveOperator) MarshalPrim(optimized bool) (micheline.Prim, error) {
	return bind.MarshalParams(optimized, _f.Owner, _f.Operator, _f.TokenId)
}

// UnmarshalPrim unmarshals a Prim into a FA2NFTRemoveOperator.
func (_f *FA2NFTRemoveOperator) UnmarshalPrim(prim micheline.Prim) error {
	return bind.UnmarshalPrimPaths(prim, map[string]any{"l": &_f.Owner, "r/l": &_f.Operator, "r/r": &_f.TokenId})
}

// FA2NFTRecord10 is a generated struct used to interact with FA2NFT smart contract.
type FA2NFTRecord10 struct {
	To      tezos.Address
	TokenId *big.Int
	Amount  *big.Int
}

// MarshalPrim marshals FA2NFTRecord10 into a Prim.
func (_f *FA2NFTRecord10) MarshalPrim(optimized bool) (micheline.Prim, error) {
	return bind.MarshalParams(optimized, _f.To, _f.TokenId, _f.Amount)
}

// UnmarshalPrim unmarshals a Prim into a FA2NFTRecord10.
func (_f *FA2NFTRecord10) UnmarshalPrim(prim micheline.Prim) error {
	return bind.UnmarshalPrimPaths(prim, map[string]any{"l": &_f.To, "r/l": &_f.TokenId, "r/r": &_f.Amount})
}

// FA2NFTRecord11 is a generated struct used to interact with FA2NFT smart contract.
type FA2NFTRecord11 struct {
	From tezos.Address
	Txs  []*FA2NFTRecord10
}

// MarshalPrim marshals FA2NFTRecord11 into a Prim.
func (_f *FA2NFTRecord11) MarshalPrim(optimized bool) (micheline.Prim, error) {
	return bind.MarshalParams(optimized, _f.From, _f.Txs)
}

// UnmarshalPrim unmarshals a Prim into a FA2NFTRecord11.
func (_f *FA2NFTRecord11) UnmarshalPrim(prim micheline.Prim) error {
	return bind.UnmarshalPrimPaths(prim, map[string]any{"l": &_f.From, "r": &_f.Txs})
}

// FA2NFTRecord12 is a generated struct used to interact with FA2NFT smart contract.
type FA2NFTRecord12 struct {
	TransferParams []*FA2NFTRecord11
	UserPk         tezos.Key
	UserSig        tezos.Signature
}

// MarshalPrim marshals FA2NFTRecord12 into a Prim.
func (_f *FA2NFTRecord12) MarshalPrim(optimized bool) (micheline.Prim, error) {
	return bind.MarshalParams(optimized, _f.TransferParams, _f.UserPk, _f.UserSig)
}

// UnmarshalPrim unmarshals a Prim into a FA2NFTRecord12.
func (_f *FA2NFTRecord12) UnmarshalPrim(prim micheline.Prim) error {
	return bind.UnmarshalPrimPaths(prim, map[string]any{"l": &_f.TransferParams, "r/l": &_f.UserPk, "r/r": &_f.UserSig})
}

// FA2NFT entry names
const (
	FA2NFTDeclareOwnershipEntry      = "declare_ownership"
	FA2NFTClaimOwnershipEntry        = "claim_ownership"
	FA2NFTPauseEntry                 = "pause"
	FA2NFTUnpauseEntry               = "unpause"
	FA2NFTSetMetadataEntry           = "set_metadata"
	FA2NFTSetTokenMetadataEntry      = "set_token_metadata"
	FA2NFTSetPermitsEntry            = "set_permits"
	FA2NFTUpdateOperatorsEntry       = "update_operators"
	FA2NFTUpdateOperatorsForAllEntry = "update_operators_for_all"
	FA2NFTDoTransferEntry            = "do_transfer"
	FA2NFTTransferGaslessEntry       = "transfer_gasless"
	FA2NFTTransferEntry              = "transfer"
	FA2NFTMintEntry                  = "mint"
	FA2NFTBurnEntry                  = "burn"
	FA2NFTBalanceOfEntry             = "balance_of"
)

const FA2NFTMicheline = `{"code":[{"prim":"parameter","args":[{"prim":"or","args":[{"prim":"or","args":[{"prim":"or","args":[{"prim":"or","args":[{"prim":"pair","annots":["%balance_of"],"args":[{"prim":"list","annots":["%requests"],"args":[{"prim":"pair","args":[{"prim":"address","annots":["%owner"]},{"prim":"nat","annots":["%token_id"]}]}]},{"prim":"contract","annots":["%callback"],"args":[{"prim":"list","args":[{"prim":"pair","args":[{"prim":"pair","annots":["%request"],"args":[{"prim":"address","annots":["%owner"]},{"prim":"nat","annots":["%token_id"]}]},{"prim":"nat","annots":["%balance"]}]}]}]}]},{"prim":"address","annots":["%declare_ownership"]}]},{"prim":"or","args":[{"prim":"unit","annots":["%claim_ownership"]},{"prim":"unit","annots":["%pause"]}]}]},{"prim":"or","args":[{"prim":"or","args":[{"prim":"unit","annots":["%unpause"]},{"prim":"pair","annots":["%set_metadata"],"args":[{"prim":"string","annots":["%k"]},{"prim":"option","annots":["%d"],"args":[{"prim":"bytes"}]}]}]},{"prim":"or","args":[{"prim":"pair","annots":["%set_token_metadata"],"args":[{"prim":"nat","annots":["%tid"]},{"prim":"map","annots":["%tdata"],"args":[{"prim":"string"},{"prim":"bytes"}]}]},{"prim":"address","annots":["%set_permits"]}]}]}]},{"prim":"or","args":[{"prim":"or","args":[{"prim":"or","args":[{"prim":"list","annots":["%update_operators"],"args":[{"prim":"or","args":[{"prim":"pair","annots":["%add_operator"],"args":[{"prim":"address","annots":["%owner"]},{"prim":"pair","args":[{"prim":"address","annots":["%operator"]},{"prim":"nat","annots":["%token_id"]}]}]},{"prim":"pair","annots":["%remove_operator"],"args":[{"prim":"address","annots":["%owner"]},{"prim":"pair","args":[{"prim":"address","annots":["%operator"]},{"prim":"nat","annots":["%token_id"]}]}]}]}]},{"prim":"list","annots":["%update_operators_for_all"],"args":[{"prim":"or","args":[{"prim":"address","annots":["%add_for_all"]},{"prim":"address","annots":["%remove_for_all"]}]}]}]},{"prim":"or","args":[{"prim":"list","annots":["%do_transfer"],"args":[{"prim":"pair","args":[{"prim":"address","annots":["%from_"]},{"prim":"list","annots":["%txs"],"args":[{"prim":"pair","args":[{"prim":"address","annots":["%to_"]},{"prim":"pair","args":[{"prim":"nat","annots":["%token_id"]},{"prim":"nat","annots":["%amount"]}]}]}]}]}]},{"prim":"list","annots":["%transfer_gasless"],"args":[{"prim":"pair","args":[{"prim":"list","annots":["%transfer_params"],"args":[{"prim":"pair","args":[{"prim":"address","annots":["%from_"]},{"prim":"list","annots":["%txs"],"args":[{"prim":"pair","args":[{"prim":"address","annots":["%to_"]},{"prim":"pair","args":[{"prim":"nat","annots":["%token_id"]},{"prim":"nat","annots":["%amount"]}]}]}]}]}]},{"prim":"pair","args":[{"prim":"key","annots":["%user_pk"]},{"prim":"signature","annots":["%user_sig"]}]}]}]}]}]},{"prim":"or","args":[{"prim":"or","args":[{"prim":"list","annots":["%transfer"],"args":[{"prim":"pair","args":[{"prim":"address","annots":["%from_"]},{"prim":"list","annots":["%txs"],"args":[{"prim":"pair","args":[{"prim":"address","annots":["%to_"]},{"prim":"pair","args":[{"prim":"nat","annots":["%token_id"]},{"prim":"nat","annots":["%amount"]}]}]}]}]}]},{"prim":"pair","annots":["%mint"],"args":[{"prim":"address","annots":["%tow"]},{"prim":"pair","args":[{"prim":"nat","annots":["%tid"]},{"prim":"pair","args":[{"prim":"map","annots":["%tmd"],"args":[{"prim":"string"},{"prim":"bytes"}]},{"prim":"list","annots":["%roy"],"args":[{"prim":"pair","args":[{"prim":"address","annots":["%part_account"]},{"prim":"nat","annots":["%part_value"]}]}]}]}]}]}]},{"prim":"nat","annots":["%burn"]}]}]}]}]},{"prim":"storage","args":[{"prim":"pair","args":[{"prim":"address","annots":["%owner"]},{"prim":"pair","args":[{"prim":"address","annots":["%permits"]},{"prim":"pair","args":[{"prim":"option","annots":["%owner_candidate"],"args":[{"prim":"address"}]},{"prim":"pair","args":[{"prim":"bool","annots":["%paused"]},{"prim":"pair","args":[{"prim":"big_map","annots":["%token_metadata"],"args":[{"prim":"nat"},{"prim":"pair","args":[{"prim":"nat","annots":["%token_id"]},{"prim":"map","annots":["%token_info"],"args":[{"prim":"string"},{"prim":"bytes"}]}]}]},{"prim":"pair","args":[{"prim":"big_map","annots":["%ledger"],"args":[{"prim":"nat"},{"prim":"address"}]},{"prim":"pair","args":[{"prim":"big_map","annots":["%royalties"],"args":[{"prim":"nat"},{"prim":"list","args":[{"prim":"pair","args":[{"prim":"address","annots":["%part_account"]},{"prim":"nat","annots":["%part_value"]}]}]}]},{"prim":"pair","args":[{"prim":"big_map","annots":["%operator"],"args":[{"prim":"pair","args":[{"prim":"address"},{"prim":"pair","args":[{"prim":"nat"},{"prim":"address"}]}]},{"prim":"unit"}]},{"prim":"pair","args":[{"prim":"big_map","annots":["%operator_for_all"],"args":[{"prim":"pair","args":[{"prim":"address"},{"prim":"address"}]},{"prim":"unit"}]},{"prim":"big_map","annots":["%metadata"],"args":[{"prim":"string"},{"prim":"bytes"}]}]}]}]}]}]}]}]}]}]}]},{"prim":"code","args":[[{"prim":"LAMBDA","args":[{"prim":"bool"},{"prim":"bool"},[{"prim":"PUSH","args":[{"prim":"unit"},{"prim":"Unit"}]},{"prim":"DUP","args":[{"int":"2"}]},{"prim":"IF","args":[[{"prim":"PUSH","args":[{"prim":"string"},{"string":"CONTRACT_PAUSED"}]},{"prim":"FAILWITH"}],[]]},{"prim":"PUSH","args":[{"prim":"bool"},{"prim":"True"}]},{"prim":"SWAP"},{"prim":"DROP"},{"prim":"DUG","args":[{"int":"1"}]},{"prim":"DROP"}]]},{"prim":"LAMBDA","args":[{"prim":"pair","args":[{"prim":"string"},{"prim":"list","args":[{"prim":"pair","args":[{"prim":"address","annots":["%from_"]},{"prim":"list","annots":["%txs"],"args":[{"prim":"pair","args":[{"prim":"address","annots":["%to_"]},{"prim":"pair","args":[{"prim":"nat","annots":["%token_id"]},{"prim":"nat","annots":["%amount"]}]}]}]}]}]}]},{"prim":"option","args":[{"prim":"address"}]},[{"prim":"UNPAIR","args":[{"int":"2"}]},{"prim":"PUSH","args":[{"prim":"unit"},{"prim":"Unit"}]},{"prim":"DUP","args":[{"int":"3"}]},{"prim":"IF_CONS","args":[[{"prim":"DUP"},{"prim":"CAR"},{"prim":"DUP","args":[{"int":"3"}]},{"prim":"ITER","args":[[{"prim":"DUP"},{"prim":"CAR"},{"prim":"DUP","args":[{"int":"3"}]},{"prim":"COMPARE"},{"prim":"EQ"},{"prim":"NOT"},{"prim":"IF","args":[[{"prim":"PUSH","args":[{"prim":"string"},{"string":"FA2_NOT_OPERATOR"}]},{"prim":"FAILWITH"}],[]]},{"prim":"DROP"}]]},{"prim":"DUP"},{"prim":"SOME"},{"prim":"DIP","args":[[{"prim":"DIG","args":[{"int":"3"}]},{"prim":"DROP"}]]},{"prim":"DUG","args":[{"int":"3"}]},{"prim":"DROP","args":[{"int":"3"}]}],[{"prim":"NONE","args":[{"prim":"address"}]},{"prim":"SWAP"},{"prim":"DROP"}]]},{"prim":"DUG","args":[{"int":"2"}]},{"prim":"DROP","args":[{"int":"2"}]}]]},{"prim":"LAMBDA","args":[{"prim":"pair","args":[{"prim":"big_map","args":[{"prim":"nat"},{"prim":"address"}]},{"prim":"pair","args":[{"prim":"big_map","args":[{"prim":"pair","args":[{"prim":"address"},{"prim":"address"}]},{"prim":"unit"}]},{"prim":"pair","args":[{"prim":"big_map","args":[{"prim":"pair","args":[{"prim":"address"},{"prim":"pair","args":[{"prim":"nat"},{"prim":"address"}]}]},{"prim":"unit"}]},{"prim":"list","args":[{"prim":"pair","args":[{"prim":"address","annots":["%from_"]},{"prim":"list","annots":["%txs"],"args":[{"prim":"pair","args":[{"prim":"address","annots":["%to_"]},{"prim":"pair","args":[{"prim":"nat","annots":["%token_id"]},{"prim":"nat","annots":["%amount"]}]}]}]}]}]}]}]}]},{"prim":"bool"},[{"prim":"UNPAIR","args":[{"int":"4"}]},{"prim":"PUSH","args":[{"prim":"unit"},{"prim":"Unit"}]},{"prim":"PUSH","args":[{"prim":"bool"},{"prim":"True"}]},{"prim":"DUP","args":[{"int":"6"}]},{"prim":"ITER","args":[[{"prim":"DUP"},{"prim":"CAR"},{"prim":"DUP","args":[{"int":"2"}]},{"prim":"CDR"},{"prim":"DUP"},{"prim":"ITER","args":[[{"prim":"DUP","args":[{"int":"5"}]},{"prim":"IF","args":[[{"prim":"DUP","args":[{"int":"3"}]},{"prim":"SENDER"},{"prim":"COMPARE"},{"prim":"NEQ"},{"prim":"IF","args":[[{"prim":"DUP","args":[{"int":"9"}]},{"prim":"DUP","args":[{"int":"4"}]},{"prim":"DUP","args":[{"int":"3"}]},{"prim":"CDR"},{"prim":"CAR"},{"prim":"PAIR"},{"prim":"SENDER"},{"prim":"PAIR"},{"prim":"MEM"},{"prim":"IF","args":[[{"prim":"PUSH","args":[{"prim":"bool"},{"prim":"True"}]}],[{"prim":"DUP","args":[{"int":"8"}]},{"prim":"DUP","args":[{"int":"4"}]},{"prim":"SENDER"},{"prim":"PAIR"},{"prim":"MEM"},{"prim":"IF","args":[[{"prim":"PUSH","args":[{"prim":"bool"},{"prim":"True"}]}],[{"prim":"PUSH","args":[{"prim":"bool"},{"prim":"False"}]}]]}]]}],[{"prim":"DUP","args":[{"int":"7"}]},{"prim":"DUP","args":[{"int":"2"}]},{"prim":"CDR"},{"prim":"CAR"},{"prim":"MEM"}]]},{"prim":"IF","args":[[{"prim":"PUSH","args":[{"prim":"bool"},{"prim":"True"}]}],[{"prim":"PUSH","args":[{"prim":"bool"},{"prim":"False"}]}]]}],[{"prim":"PUSH","args":[{"prim":"bool"},{"prim":"False"}]}]]},{"prim":"DIP","args":[[{"prim":"DIG","args":[{"int":"4"}]},{"prim":"DROP"}]]},{"prim":"DUG","args":[{"int":"4"}]},{"prim":"DROP"}]]},{"prim":"DROP","args":[{"int":"3"}]}]]},{"prim":"DUP"},{"prim":"DIP","args":[[{"prim":"DIG","args":[{"int":"1"}]},{"prim":"DROP"}]]},{"prim":"DUG","args":[{"int":"1"}]},{"prim":"DROP"},{"prim":"DUG","args":[{"int":"4"}]},{"prim":"DROP","args":[{"int":"4"}]}]]},{"prim":"NIL","args":[{"prim":"operation"}]},{"prim":"DIG","args":[{"int":"4"}]},{"prim":"UNPAIR"},{"prim":"DIP","args":[[{"prim":"UNPAIR","args":[{"int":"10"}]}]]},{"prim":"IF_LEFT","args":[[{"prim":"IF_LEFT","args":[[{"prim":"IF_LEFT","args":[[{"prim":"IF_LEFT","args":[[{"prim":"UNPAIR"},{"prim":"NIL","args":[{"prim":"operation"}]},{"prim":"NIL","args":[{"prim":"operation"}]},{"prim":"DUP","args":[{"int":"15"}]},{"prim":"ITER","args":[[{"prim":"CONS"}]]},{"prim":"DUP","args":[{"int":"4"}]},{"prim":"AMOUNT"},{"prim":"DUP","args":[{"int":"5"}]},{"prim":"MAP","args":[[{"prim":"DUP","args":[{"int":"13"}]},{"prim":"DUP","args":[{"int":"2"}]},{"prim":"CDR"},{"prim":"GET"},{"prim":"IF_NONE","args":[[{"prim":"PUSH","args":[{"prim":"nat"},{"int":"0"}]}],[{"prim":"DUP","args":[{"int":"2"}]},{"prim":"CAR"},{"prim":"DUP","args":[{"int":"2"}]},{"prim":"COMPARE"},{"prim":"EQ"},{"prim":"IF","args":[[{"prim":"PUSH","args":[{"prim":"nat"},{"int":"1"}]}],[{"prim":"PUSH","args":[{"prim":"nat"},{"int":"0"}]}]]},{"prim":"SWAP"},{"prim":"DROP"}]]},{"prim":"DUP","args":[{"int":"2"}]},{"prim":"PAIR"},{"prim":"SWAP"},{"prim":"DROP"}]]},{"prim":"TRANSFER_TOKENS"},{"prim":"CONS"},{"prim":"ITER","args":[[{"prim":"CONS"}]]},{"prim":"DIP","args":[[{"prim":"DIG","args":[{"int":"12"}]},{"prim":"DROP"}]]},{"prim":"DUG","args":[{"int":"12"}]},{"prim":"DROP","args":[{"int":"2"}]},{"prim":"PAIR","args":[{"int":"10"}]},{"prim":"DIG","args":[{"int":"1"}]},{"prim":"PAIR"}],[{"prim":"DUP","args":[{"int":"2"}]},{"prim":"SENDER"},{"prim":"COMPARE"},{"prim":"EQ"},{"prim":"NOT"},{"prim":"IF","args":[[{"prim":"PUSH","args":[{"prim":"string"},{"string":"INVALID_CALLER"}]},{"prim":"FAILWITH"}],[]]},{"prim":"DUP"},{"prim":"SOME"},{"prim":"DIP","args":[[{"prim":"DIG","args":[{"int":"3"}]},{"prim":"DROP"}]]},{"prim":"DUG","args":[{"int":"3"}]},{"prim":"DROP"},{"prim":"PAIR","args":[{"int":"10"}]},{"prim":"DIG","args":[{"int":"1"}]},{"prim":"PAIR"}]]}],[{"prim":"IF_LEFT","args":[[{"prim":"DROP"},{"prim":"DUP","args":[{"int":"3"}]},{"prim":"IF_NONE","args":[[{"prim":"PUSH","args":[{"prim":"bool"},{"prim":"False"}]}],[{"prim":"SENDER"},{"prim":"DUP","args":[{"int":"2"}]},{"prim":"COMPARE"},{"prim":"EQ"},{"prim":"SWAP"},{"prim":"DROP"}]]},{"prim":"NOT"},{"prim":"IF","args":[[{"prim":"PUSH","args":[{"prim":"string"},{"string":"INVALID_CALLER"}]},{"prim":"FAILWITH"}],[]]},{"prim":"SENDER"},{"prim":"SWAP"},{"prim":"DROP"},{"prim":"NONE","args":[{"prim":"address"}]},{"prim":"DIP","args":[[{"prim":"DIG","args":[{"int":"2"}]},{"prim":"DROP"}]]},{"prim":"DUG","args":[{"int":"2"}]},{"prim":"PAIR","args":[{"int":"10"}]},{"prim":"DIG","args":[{"int":"1"}]},{"prim":"PAIR"}],[{"prim":"DROP"},{"prim":"DUP"},{"prim":"SENDER"},{"prim":"COMPARE"},{"prim":"EQ"},{"prim":"NOT"},{"prim":"IF","args":[[{"prim":"PUSH","args":[{"prim":"string"},{"string":"INVALID_CALLER"}]},{"prim":"FAILWITH"}],[]]},{"prim":"DUP","args":[{"int":"14"}]},{"prim":"DUP","args":[{"int":"5"}]},{"prim":"EXEC"},{"prim":"NOT"},{"prim":"IF","args":[[{"prim":"PUSH","args":[{"prim":"string"},{"string":"pausable_r1"}]},{"prim":"PUSH","args":[{"prim":"string"},{"string":"INVALID_CONDITION"}]},{"prim":"PAIR"},{"prim":"FAILWITH"}],[]]},{"prim":"PUSH","args":[{"prim":"bool"},{"prim":"True"}]},{"prim":"DIP","args":[[{"prim":"DIG","args":[{"int":"3"}]},{"prim":"DROP"}]]},{"prim":"DUG","args":[{"int":"3"}]},{"prim":"PAIR","args":[{"int":"10"}]},{"prim":"DIG","args":[{"int":"1"}]},{"prim":"PAIR"}]]}]]}],[{"prim":"IF_LEFT","args":[[{"prim":"IF_LEFT","args":[[{"prim":"DROP"},{"prim":"DUP"},{"prim":"SENDER"},{"prim":"COMPARE"},{"prim":"EQ"},{"prim":"NOT"},{"prim":"IF","args":[[{"prim":"PUSH","args":[{"prim":"string"},{"string":"INVALID_CALLER"}]},{"prim":"FAILWITH"}],[]]},{"prim":"DUP","args":[{"int":"4"}]},{"prim":"NOT"},{"prim":"IF","args":[[{"prim":"PUSH","args":[{"prim":"string"},{"string":"CONTRACT_NOT_PAUSED"}]},{"prim":"FAILWITH"}],[]]},{"prim":"PUSH","args":[{"prim":"bool"},{"prim":"False"}]},{"prim":"DIP","args":[[{"prim":"DIG","args":[{"int":"3"}]},{"prim":"DROP"}]]},{"prim":"DUG","args":[{"int":"3"}]},{"prim":"PAIR","args":[{"int":"10"}]},{"prim":"DIG","args":[{"int":"1"}]},{"prim":"PAIR"}],[{"prim":"UNPAIR"},{"prim":"SWAP"},{"prim":"DUP","args":[{"int":"3"}]},{"prim":"SENDER"},{"prim":"COMPARE"},{"prim":"EQ"},{"prim":"NOT"},{"prim":"IF","args":[[{"prim":"PUSH","args":[{"prim":"string"},{"string":"INVALID_CALLER"}]},{"prim":"FAILWITH"}],[]]},{"prim":"DUP","args":[{"int":"16"}]},{"prim":"DUP","args":[{"int":"7"}]},{"prim":"EXEC"},{"prim":"NOT"},{"prim":"IF","args":[[{"prim":"PUSH","args":[{"prim":"string"},{"string":"md_r1"}]},{"prim":"PUSH","args":[{"prim":"string"},{"string":"INVALID_CONDITION"}]},{"prim":"PAIR"},{"prim":"FAILWITH"}],[]]},{"prim":"DUP","args":[{"int":"12"}]},{"prim":"DUP","args":[{"int":"2"}]},{"prim":"DUP","args":[{"int":"4"}]},{"prim":"UPDATE"},{"prim":"DIP","args":[[{"prim":"DIG","args":[{"int":"11"}]},{"prim":"DROP"}]]},{"prim":"DUG","args":[{"int":"11"}]},{"prim":"DROP","args":[{"int":"2"}]},{"prim":"PAIR","args":[{"int":"10"}]},{"prim":"DIG","args":[{"int":"1"}]},{"prim":"PAIR"}]]}],[{"prim":"IF_LEFT","args":[[{"prim":"UNPAIR"},{"prim":"SWAP"},{"prim":"DUP","args":[{"int":"3"}]},{"prim":"SENDER"},{"prim":"COMPARE"},{"prim":"EQ"},{"prim":"NOT"},{"prim":"IF","args":[[{"prim":"PUSH","args":[{"prim":"string"},{"string":"INVALID_CALLER"}]},{"prim":"FAILWITH"}],[]]},{"prim":"DUP","args":[{"int":"16"}]},{"prim":"DUP","args":[{"int":"7"}]},{"prim":"EXEC"},{"prim":"NOT"},{"prim":"IF","args":[[{"prim":"PUSH","args":[{"prim":"string"},{"string":"tmd_r1"}]},{"prim":"PUSH","args":[{"prim":"string"},{"string":"INVALID_CONDITION"}]},{"prim":"PAIR"},{"prim":"FAILWITH"}],[]]},{"prim":"DUP","args":[{"int":"7"}]},{"prim":"DUP","args":[{"int":"2"}]},{"prim":"DUP","args":[{"int":"4"}]},{"prim":"PAIR"},{"prim":"SOME"},{"prim":"DUP","args":[{"int":"4"}]},{"prim":"UPDATE"},{"prim":"DIP","args":[[{"prim":"DIG","args":[{"int":"6"}]},{"prim":"DROP"}]]},{"prim":"DUG","args":[{"int":"6"}]},{"prim":"DROP","args":[{"int":"2"}]},{"prim":"PAIR","args":[{"int":"10"}]},{"prim":"DIG","args":[{"int":"1"}]},{"prim":"PAIR"}],[{"prim":"DUP","args":[{"int":"2"}]},{"prim":"SENDER"},{"prim":"COMPARE"},{"prim":"EQ"},{"prim":"NOT"},{"prim":"IF","args":[[{"prim":"PUSH","args":[{"prim":"string"},{"string":"INVALID_CALLER"}]},{"prim":"FAILWITH"}],[]]},{"prim":"DUP","args":[{"int":"15"}]},{"prim":"DUP","args":[{"int":"6"}]},{"prim":"EXEC"},{"prim":"NOT"},{"prim":"IF","args":[[{"prim":"PUSH","args":[{"prim":"string"},{"string":"p_r1"}]},{"prim":"PUSH","args":[{"prim":"string"},{"string":"INVALID_CONDITION"}]},{"prim":"PAIR"},{"prim":"FAILWITH"}],[]]},{"prim":"DUP"},{"prim":"DIP","args":[[{"prim":"DIG","args":[{"int":"2"}]},{"prim":"DROP"}]]},{"prim":"DUG","args":[{"int":"2"}]},{"prim":"DROP"},{"prim":"PAIR","args":[{"int":"10"}]},{"prim":"DIG","args":[{"int":"1"}]},{"prim":"PAIR"}]]}]]}]]}],[{"prim":"IF_LEFT","args":[[{"prim":"IF_LEFT","args":[[{"prim":"IF_LEFT","args":[[{"prim":"DUP","args":[{"int":"15"}]},{"prim":"DUP","args":[{"int":"6"}]},{"prim":"EXEC"},{"prim":"NOT"},{"prim":"IF","args":[[{"prim":"PUSH","args":[{"prim":"string"},{"string":"fa2_r1"}]},{"prim":"PUSH","args":[{"prim":"string"},{"string":"INVALID_CONDITION"}]},{"prim":"PAIR"},{"prim":"FAILWITH"}],[]]},{"prim":"DUP"},{"prim":"ITER","args":[[{"prim":"DUP"},{"prim":"IF_LEFT","args":[[{"prim":"SENDER"},{"prim":"DUP","args":[{"int":"2"}]},{"prim":"CAR"},{"prim":"COMPARE"},{"prim":"EQ"},{"prim":"NOT"},{"prim":"IF","args":[[{"prim":"PUSH","args":[{"prim":"string"},{"string":"CALLER_NOT_OWNER"}]},{"prim":"FAILWITH"}],[]]},{"prim":"DUP","args":[{"int":"11"}]},{"prim":"PUSH","args":[{"prim":"unit"},{"prim":"Unit"}]},{"prim":"SOME"},{"prim":"DUP","args":[{"int":"3"}]},{"prim":"CAR"},{"prim":"DUP","args":[{"int":"4"}]},{"prim":"CDR"},{"prim":"CDR"},{"prim":"PAIR"},{"prim":"DUP","args":[{"int":"4"}]},{"prim":"CDR"},{"prim":"CAR"},{"prim":"PAIR"},{"prim":"UPDATE"},{"prim":"DIP","args":[[{"prim":"DIG","args":[{"int":"10"}]},{"prim":"DROP"}]]},{"prim":"DUG","args":[{"int":"10"}]},{"prim":"DROP"}],[{"prim":"SENDER"},{"prim":"DUP","args":[{"int":"2"}]},{"prim":"CAR"},{"prim":"COMPARE"},{"prim":"EQ"},{"prim":"NOT"},{"prim":"IF","args":[[{"prim":"PUSH","args":[{"prim":"string"},{"string":"CALLER_NOT_OWNER"}]},{"prim":"FAILWITH"}],[]]},{"prim":"DUP","args":[{"int":"11"}]},{"prim":"NONE","args":[{"prim":"unit"}]},{"prim":"DUP","args":[{"int":"3"}]},{"prim":"CAR"},{"prim":"DUP","args":[{"int":"4"}]},{"prim":"CDR"},{"prim":"CDR"},{"prim":"PAIR"},{"prim":"DUP","args":[{"int":"4"}]},{"prim":"CDR"},{"prim":"CAR"},{"prim":"PAIR"},{"prim":"UPDATE"},{"prim":"DIP","args":[[{"prim":"DIG","args":[{"int":"10"}]},{"prim":"DROP"}]]},{"prim":"DUG","args":[{"int":"10"}]},{"prim":"DROP"}]]},{"prim":"DROP"}]]},{"prim":"DROP"},{"prim":"PAIR","args":[{"int":"10"}]},{"prim":"DIG","args":[{"int":"1"}]},{"prim":"PAIR"}],[{"prim":"DUP","args":[{"int":"15"}]},{"prim":"DUP","args":[{"int":"6"}]},{"prim":"EXEC"},{"prim":"NOT"},{"prim":"IF","args":[[{"prim":"PUSH","args":[{"prim":"string"},{"string":"fa2_r2"}]},{"prim":"PUSH","args":[{"prim":"string"},{"string":"INVALID_CONDITION"}]},{"prim":"PAIR"},{"prim":"FAILWITH"}],[]]},{"prim":"DUP"},{"prim":"ITER","args":[[{"prim":"DUP"},{"prim":"IF_LEFT","args":[[{"prim":"DUP","args":[{"int":"12"}]},{"prim":"PUSH","args":[{"prim":"unit"},{"prim":"Unit"}]},{"prim":"SOME"},{"prim":"SENDER"},{"prim":"DUP","args":[{"int":"4"}]},{"prim":"PAIR"},{"prim":"UPDATE"},{"prim":"DIP","args":[[{"prim":"DIG","args":[{"int":"11"}]},{"prim":"DROP"}]]},{"prim":"DUG","args":[{"int":"11"}]},{"prim":"DROP"}],[{"prim":"DUP","args":[{"int":"12"}]},{"prim":"NONE","args":[{"prim":"unit"}]},{"prim":"SENDER"},{"prim":"DUP","args":[{"int":"4"}]},{"prim":"PAIR"},{"prim":"UPDATE"},{"prim":"DIP","args":[[{"prim":"DIG","args":[{"int":"11"}]},{"prim":"DROP"}]]},{"prim":"DUG","args":[{"int":"11"}]},{"prim":"DROP"}]]},{"prim":"DROP"}]]},{"prim":"DROP"},{"prim":"PAIR","args":[{"int":"10"}]},{"prim":"DIG","args":[{"int":"1"}]},{"prim":"PAIR"}]]}],[{"prim":"IF_LEFT","args":[[{"prim":"SELF_ADDRESS"},{"prim":"SENDER"},{"prim":"COMPARE"},{"prim":"EQ"},{"prim":"NOT"},{"prim":"IF","args":[[{"prim":"PUSH","args":[{"prim":"string"},{"string":"INVALID_CALLER"}]},{"prim":"FAILWITH"}],[]]},{"prim":"DUP"},{"prim":"ITER","args":[[{"prim":"DUP"},{"prim":"CAR"},{"prim":"DUP","args":[{"int":"2"}]},{"prim":"CDR"},{"prim":"DUP"},{"prim":"ITER","args":[[{"prim":"DUP"},{"prim":"CDR"},{"prim":"CAR"},{"prim":"DUP","args":[{"int":"12"}]},{"prim":"DUP","args":[{"int":"2"}]},{"prim":"GET"},{"prim":"IF_NONE","args":[[{"prim":"NONE","args":[{"prim":"address"}]}],[{"prim":"DUP"},{"prim":"SOME"},{"prim":"SWAP"},{"prim":"DROP"}]]},{"prim":"IF_NONE","args":[[{"prim":"PUSH","args":[{"prim":"string"},{"string":"FA2_TOKEN_UNDEFINED"}]},{"prim":"FAILWITH"}],[]]},{"prim":"DUP","args":[{"int":"5"}]},{"prim":"DUP","args":[{"int":"2"}]},{"prim":"COMPARE"},{"prim":"EQ"},{"prim":"IF","args":[[{"prim":"PUSH","args":[{"prim":"nat"},{"int":"1"}]},{"prim":"DUP","args":[{"int":"4"}]},{"prim":"CDR"},{"prim":"CDR"},{"prim":"COMPARE"},{"prim":"EQ"},{"prim":"IF","args":[[{"prim":"PUSH","args":[{"prim":"bool"},{"prim":"True"}]}],[{"prim":"PUSH","args":[{"prim":"bool"},{"prim":"False"}]}]]}],[{"prim":"PUSH","args":[{"prim":"bool"},{"prim":"False"}]}]]},{"prim":"NOT"},{"prim":"IF","args":[[{"prim":"PUSH","args":[{"prim":"string"},{"string":"FA2_INSUFFICIENT_BALANCE"}]},{"prim":"FAILWITH"}],[]]},{"prim":"DUP","args":[{"int":"13"}]},{"prim":"DUP","args":[{"int":"4"}]},{"prim":"CAR"},{"prim":"SOME"},{"prim":"DUP","args":[{"int":"4"}]},{"prim":"UPDATE"},{"prim":"DIP","args":[[{"prim":"DIG","args":[{"int":"12"}]},{"prim":"DROP"}]]},{"prim":"DUG","args":[{"int":"12"}]},{"prim":"DROP","args":[{"int":"3"}]}]]},{"prim":"DROP","args":[{"int":"3"}]}]]},{"prim":"DROP"},{"prim":"PAIR","args":[{"int":"10"}]},{"prim":"DIG","args":[{"int":"1"}]},{"prim":"PAIR"}],[{"prim":"DUP","args":[{"int":"15"}]},{"prim":"DUP","args":[{"int":"6"}]},{"prim":"EXEC"},{"prim":"NOT"},{"prim":"IF","args":[[{"prim":"PUSH","args":[{"prim":"string"},{"string":"fa2_r3"}]},{"prim":"PUSH","args":[{"prim":"string"},{"string":"INVALID_CONDITION"}]},{"prim":"PAIR"},{"prim":"FAILWITH"}],[]]},{"prim":"DUP"},{"prim":"ITER","args":[[{"prim":"DUP"},{"prim":"CAR"},{"prim":"DUP","args":[{"int":"2"}]},{"prim":"CDR"},{"prim":"CAR"},{"prim":"DUP","args":[{"int":"3"}]},{"prim":"CDR"},{"prim":"CDR"},{"prim":"NIL","args":[{"prim":"operation"}]},{"prim":"NIL","args":[{"prim":"operation"}]},{"prim":"DUP","args":[{"int":"18"}]},{"prim":"ITER","args":[[{"prim":"CONS"}]]},{"prim":"DUP","args":[{"int":"9"}]},{"prim":"CONTRACT","annots":["%check"],"args":[{"prim":"pair","args":[{"prim":"key"},{"prim":"pair","args":[{"prim":"signature"},{"prim":"bytes"}]}]}]},{"prim":"IF_NONE","args":[[{"prim":"PUSH","args":[{"prim":"string"},{"string":"check"}]},{"prim":"PUSH","args":[{"prim":"string"},{"string":"ENTRY_NOT_FOUND"}]},{"prim":"PAIR"},{"prim":"FAILWITH"}],[]]},{"prim":"PUSH","args":[{"prim":"mutez"},{"int":"0"}]},{"prim":"DUP","args":[{"int":"7"}]},{"prim":"PACK"},{"prim":"DUP","args":[{"int":"6"}]},{"prim":"PAIR"},{"prim":"DUP","args":[{"int":"7"}]},{"prim":"PAIR"},{"prim":"TRANSFER_TOKENS"},{"prim":"CONS"},{"prim":"ITER","args":[[{"prim":"CONS"}]]},{"prim":"DIP","args":[[{"prim":"DIG","args":[{"int":"15"}]},{"prim":"DROP"}]]},{"prim":"DUG","args":[{"int":"15"}]},{"prim":"NIL","args":[{"prim":"operation"}]},{"prim":"NIL","args":[{"prim":"operation"}]},{"prim":"DUP","args":[{"int":"18"}]},{"prim":"ITER","args":[[{"prim":"CONS"}]]},{"prim":"SELF_ADDRESS"},{"prim":"CONTRACT","annots":["%do_transfer"],"args":[{"prim":"list","args":[{"prim":"pair","args":[{"prim":"address"},{"prim":"list","args":[{"prim":"pair","args":[{"prim":"address"},{"prim":"pair","args":[{"prim":"nat"},{"prim":"nat"}]}]}]}]}]}]},{"prim":"IF_NONE","args":[[{"prim":"PUSH","args":[{"prim":"string"},{"string":"do_transfer"}]},{"prim":"PUSH","args":[{"prim":"string"},{"string":"ENTRY_NOT_FOUND"}]},{"prim":"PAIR"},{"prim":"FAILWITH"}],[]]},{"prim":"PUSH","args":[{"prim":"mutez"},{"int":"0"}]},{"prim":"DUP","args":[{"int":"7"}]},{"prim":"TRANSFER_TOKENS"},{"prim":"CONS"},{"prim":"ITER","args":[[{"prim":"CONS"}]]},{"prim":"DIP","args":[[{"prim":"DIG","args":[{"int":"15"}]},{"prim":"DROP"}]]},{"prim":"DUG","args":[{"int":"15"}]},{"prim":"DROP","args":[{"int":"4"}]}]]},{"prim":"DROP"},{"prim":"PAIR","args":[{"int":"10"}]},{"prim":"DIG","args":[{"int":"1"}]},{"prim":"PAIR"}]]}]]}],[{"prim":"IF_LEFT","args":[[{"prim":"IF_LEFT","args":[[{"prim":"DUP","args":[{"int":"15"}]},{"prim":"DUP","args":[{"int":"6"}]},{"prim":"EXEC"},{"prim":"NOT"},{"prim":"IF","args":[[{"prim":"PUSH","args":[{"prim":"string"},{"string":"fa2_r4"}]},{"prim":"PUSH","args":[{"prim":"string"},{"string":"INVALID_CONDITION"}]},{"prim":"PAIR"},{"prim":"FAILWITH"}],[]]},{"prim":"DUP","args":[{"int":"13"}]},{"prim":"DUP","args":[{"int":"2"}]},{"prim":"DUP","args":[{"int":"11"}]},{"prim":"PAIR"},{"prim":"DUP","args":[{"int":"12"}]},{"prim":"PAIR"},{"prim":"DUP","args":[{"int":"9"}]},{"prim":"PAIR"},{"prim":"EXEC"},{"prim":"NOT"},{"prim":"IF","args":[[{"prim":"DUP","args":[{"int":"14"}]},{"prim":"DUP","args":[{"int":"2"}]},{"prim":"PUSH","args":[{"prim":"string"},{"string":"FA2_NOT_OPERATOR"}]},{"prim":"PAIR"},{"prim":"EXEC"},{"prim":"IF_NONE","args":[[],[{"prim":"NIL","args":[{"prim":"operation"}]},{"prim":"NIL","args":[{"prim":"operation"}]},{"prim":"DUP","args":[{"int":"15"}]},{"prim":"ITER","args":[[{"prim":"CONS"}]]},{"prim":"DUP","args":[{"int":"6"}]},{"prim":"CONTRACT","annots":["%consume"],"args":[{"prim":"pair","args":[{"prim":"address"},{"prim":"pair","args":[{"prim":"bytes"},{"prim":"string"}]}]}]},{"prim":"IF_NONE","args":[[{"prim":"PUSH","args":[{"prim":"string"},{"string":"consume"}]},{"prim":"PUSH","args":[{"prim":"string"},{"string":"ENTRY_NOT_FOUND"}]},{"prim":"PAIR"},{"prim":"FAILWITH"}],[]]},{"prim":"PUSH","args":[{"prim":"mutez"},{"int":"0"}]},{"prim":"PUSH","args":[{"prim":"string"},{"string":"FA2_NOT_OPERATOR"}]},{"prim":"DUP","args":[{"int":"7"}]},{"prim":"PACK"},{"prim":"PAIR"},{"prim":"DUP","args":[{"int":"6"}]},{"prim":"PAIR"},{"prim":"TRANSFER_TOKENS"},{"prim":"CONS"},{"prim":"ITER","args":[[{"prim":"CONS"}]]},{"prim":"DIP","args":[[{"prim":"DIG","args":[{"int":"12"}]},{"prim":"DROP"}]]},{"prim":"DUG","args":[{"int":"12"}]},{"prim":"DROP"}]]}],[]]},{"prim":"NIL","args":[{"prim":"operation"}]},{"prim":"NIL","args":[{"prim":"operation"}]},{"prim":"DUP","args":[{"int":"14"}]},{"prim":"ITER","args":[[{"prim":"CONS"}]]},{"prim":"SELF_ADDRESS"},{"prim":"CONTRACT","annots":["%do_transfer"],"args":[{"prim":"list","args":[{"prim":"pair","args":[{"prim":"address"},{"prim":"list","args":[{"prim":"pair","args":[{"prim":"address"},{"prim":"pair","args":[{"prim":"nat"},{"prim":"nat"}]}]}]}]}]}]},{"prim":"IF_NONE","args":[[{"prim":"PUSH","args":[{"prim":"string"},{"string":"do_transfer"}]},{"prim":"PUSH","args":[{"prim":"string"},{"string":"ENTRY_NOT_FOUND"}]},{"prim":"PAIR"},{"prim":"FAILWITH"}],[]]},{"prim":"PUSH","args":[{"prim":"mutez"},{"int":"0"}]},{"prim":"DUP","args":[{"int":"5"}]},{"prim":"TRANSFER_TOKENS"},{"prim":"CONS"},{"prim":"ITER","args":[[{"prim":"CONS"}]]},{"prim":"DIP","args":[[{"prim":"DIG","args":[{"int":"11"}]},{"prim":"DROP"}]]},{"prim":"DUG","args":[{"int":"11"}]},{"prim":"DROP"},{"prim":"PAIR","args":[{"int":"10"}]},{"prim":"DIG","args":[{"int":"1"}]},{"prim":"PAIR"}],[{"prim":"UNPAIR"},{"prim":"SWAP"},{"prim":"UNPAIR"},{"prim":"SWAP"},{"prim":"UNPAIR"},{"prim":"SWAP"},{"prim":"DUP","args":[{"int":"5"}]},{"prim":"SENDER"},{"prim":"COMPARE"},{"prim":"EQ"},{"prim":"NOT"},{"prim":"IF","args":[[{"prim":"PUSH","args":[{"prim":"string"},{"string":"INVALID_CALLER"}]},{"prim":"FAILWITH"}],[]]},{"prim":"DUP","args":[{"int":"18"}]},{"prim":"DUP","args":[{"int":"9"}]},{"prim":"EXEC"},{"prim":"NOT"},{"prim":"IF","args":[[{"prim":"PUSH","args":[{"prim":"string"},{"string":"fa2_r5"}]},{"prim":"PUSH","args":[{"prim":"string"},{"string":"INVALID_CONDITION"}]},{"prim":"PAIR"},{"prim":"FAILWITH"}],[]]},{"prim":"DUP","args":[{"int":"10"}]},{"prim":"DUP","args":[{"int":"4"}]},{"prim":"MEM"},{"prim":"IF","args":[[{"prim":"PUSH","args":[{"prim":"string"},{"string":"ledger"}]},{"prim":"PUSH","args":[{"prim":"string"},{"string":"KEY_EXISTS"}]},{"prim":"PAIR"},{"prim":"FAILWITH"}],[{"prim":"DUP","args":[{"int":"10"}]},{"prim":"DUP","args":[{"int":"5"}]},{"prim":"SOME"},{"prim":"DUP","args":[{"int":"5"}]},{"prim":"UPDATE"},{"prim":"DIP","args":[[{"prim":"DIG","args":[{"int":"9"}]},{"prim":"DROP"}]]},{"prim":"DUG","args":[{"int":"9"}]}]]},{"prim":"DUP","args":[{"int":"9"}]},{"prim":"DUP","args":[{"int":"3"}]},{"prim":"DUP","args":[{"int":"5"}]},{"prim":"PAIR"},{"prim":"SOME"},{"prim":"DUP","args":[{"int":"5"}]},{"prim":"UPDATE"},{"prim":"DIP","args":[[{"prim":"DIG","args":[{"int":"8"}]},{"prim":"DROP"}]]},{"prim":"DUG","args":[{"int":"8"}]},{"prim":"DUP","args":[{"int":"11"}]},{"prim":"DUP","args":[{"int":"2"}]},{"prim":"SOME"},{"prim":"DUP","args":[{"int":"5"}]},{"prim":"UPDATE"},{"prim":"DIP","args":[[{"prim":"DIG","args":[{"int":"10"}]},{"prim":"DROP"}]]},{"prim":"DUG","args":[{"int":"10"}]},{"prim":"DROP","args":[{"int":"4"}]},{"prim":"PAIR","args":[{"int":"10"}]},{"prim":"DIG","args":[{"int":"1"}]},{"prim":"PAIR"}]]}],[{"prim":"DUP","args":[{"int":"7"}]},{"prim":"DUP","args":[{"int":"2"}]},{"prim":"GET"},{"prim":"IF_NONE","args":[[{"prim":"NONE","args":[{"prim":"address"}]}],[{"prim":"DUP"},{"prim":"SOME"},{"prim":"SWAP"},{"prim":"DROP"}]]},{"prim":"IF_NONE","args":[[{"prim":"PUSH","args":[{"prim":"string"},{"string":"FA2_TOKEN_UNDEFINED"}]},{"prim":"FAILWITH"}],[]]},{"prim":"DUP","args":[{"int":"16"}]},{"prim":"DUP","args":[{"int":"7"}]},{"prim":"EXEC"},{"prim":"NOT"},{"prim":"IF","args":[[{"prim":"PUSH","args":[{"prim":"string"},{"string":"fa2_r6"}]},{"prim":"PUSH","args":[{"prim":"string"},{"string":"INVALID_CONDITION"}]},{"prim":"PAIR"},{"prim":"FAILWITH"}],[]]},{"prim":"SENDER"},{"prim":"DUP","args":[{"int":"2"}]},{"prim":"COMPARE"},{"prim":"EQ"},{"prim":"NOT"},{"prim":"IF","args":[[{"prim":"PUSH","args":[{"prim":"string"},{"string":"CALLER_NOT_OWNER"}]},{"prim":"FAILWITH"}],[]]},{"prim":"DUP","args":[{"int":"8"}]},{"prim":"NONE","args":[{"prim":"address"}]},{"prim":"DUP","args":[{"int":"4"}]},{"prim":"UPDATE"},{"prim":"DIP","args":[[{"prim":"DIG","args":[{"int":"7"}]},{"prim":"DROP"}]]},{"prim":"DUG","args":[{"int":"7"}]},{"prim":"DUP","args":[{"int":"7"}]},{"prim":"NONE","args":[{"prim":"pair","args":[{"prim":"nat"},{"prim":"map","args":[{"prim":"string"},{"prim":"bytes"}]}]}]},{"prim":"DUP","args":[{"int":"4"}]},{"prim":"UPDATE"},{"prim":"DIP","args":[[{"prim":"DIG","args":[{"int":"6"}]},{"prim":"DROP"}]]},{"prim":"DUG","args":[{"int":"6"}]},{"prim":"DUP","args":[{"int":"9"}]},{"prim":"NONE","args":[{"prim":"list","args":[{"prim":"pair","args":[{"prim":"address"},{"prim":"nat"}]}]}]},{"prim":"DUP","args":[{"int":"4"}]},{"prim":"UPDATE"},{"prim":"DIP","args":[[{"prim":"DIG","args":[{"int":"8"}]},{"prim":"DROP"}]]},{"prim":"DUG","args":[{"int":"8"}]},{"prim":"DROP","args":[{"int":"2"}]},{"prim":"PAIR","args":[{"int":"10"}]},{"prim":"DIG","args":[{"int":"1"}]},{"prim":"PAIR"}]]}]]}]]},{"prim":"DIP","args":[[{"prim":"DROP","args":[{"int":"3"}]}]]}]]},{"prim":"view","args":[{"string":"get_royalties"},{"prim":"nat"},{"prim":"list","args":[{"prim":"pair","args":[{"prim":"address","annots":["%part_account"]},{"prim":"nat","annots":["%part_value"]}]}]},[{"prim":"UNPAIR"},{"prim":"DIP","args":[[{"prim":"CDR"},{"prim":"CDR"},{"prim":"CDR"},{"prim":"CDR"},{"prim":"CDR"},{"prim":"CDR"},{"prim":"UNPAIR"},{"prim":"SWAP"},{"prim":"DROP"}]]},{"prim":"UNIT"},{"prim":"DUP","args":[{"int":"3"}]},{"prim":"DUP","args":[{"int":"3"}]},{"prim":"GET"},{"prim":"IF_NONE","args":[[{"prim":"NIL","args":[{"prim":"pair","args":[{"prim":"address","annots":["%part_account"]},{"prim":"nat","annots":["%part_value"]}]}]}],[]]},{"prim":"SWAP"},{"prim":"DROP"},{"prim":"DIP","args":[[{"prim":"DROP","args":[{"int":"2"}]}]]}]]}],"storage":{}}`

var (
	_ = big.NewInt
	_ = micheline.NewPrim
	_ = bind.MarshalParams
	_ = time.Now
)
