// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package {{.Package}}

import (
    "context"
    "math/big"

    "github.com/jeanschmitt/tzgen/pkg/bind"
    "github.com/jeanschmitt/tzgen/pkg/prim"
    "github.com/completium/go-tezos/v4/rpc"
)

{{$root := .}}

{{with .Contract}}
{{$contract := .Name}}
{{$r := .Receiver}}
{{$rc := printf "(%s %s)" $r .Name}}
{{$rcp := printf "(%s *%s)" $r .Name}}
{{$rb := printf "(%s %s%s)" $r .Name "Builder"}}

// {{.Name}}Interface is the interface to interact with {{.Name}} smart contract.
type {{.Name}}Interface interface {
    {{range .Entrypoints}} {{.Name.Normalized}}(ctx context.Context, {{range .Args}}{{printf "%s %s," .Name.Normalized .Type.GoType}}{{end}}) (*bind.Injection, error)
    {{end}}
}

// {{.Name}} is a handle to interact with a Tezos smart contract.
type {{.Name}} struct {
    {{.Name}}Builder
    Address string
    rpc *rpc.Client
}

// New{{.Name}} returns a handle to a deployed {{.Name}} smart contract.
func New{{.Name}}(ctx context.Context, address string, tzClient *rpc.Client) (*{{.Name}}, error) {
    isDeployed, err := bind.IsDeployed(tzClient, address)
    if err != nil {
        return nil, err
    }
    if !isDeployed {
        return nil, bind.ErrContractNotFound
    }

    contract := &{{.Name}}{
        Address: address,
        rpc:     tzClient,
    }
    
    return contract, nil
}

// {{.Name}}Builder contains methods to build operations parameters.
type {{.Name}}Builder struct{}

// region Entrypoints

{{range .Entrypoints}}

// {{.Name.Normalized}} is a binding to the {{$contract}} smart contract's `{{.Name.Original}}` entrypoint.
func {{$rcp}} {{.Name.Normalized}}(ctx context.Context, {{range .Args}}{{printf "%s %s," .Name.Normalized .Type.GoType}}{{end}}) (*bind.Injection, error) {
    op := bind.NewOperation({{$r}}.Address, "{{.Name.Original}}", {{$r}}.{{.Name.Normalized}}Op({{range .Args}}{{.Name.Normalized}},{{end}}))
    return op.PreApplyAndInject(ctx, {{$r}}.rpc)
}

{{end}}

// endregion

// region Entrypoint operation builders

{{range .Entrypoints}}

// {{.Name.Normalized}}Op builds the Operation parameters to interact with `{{.Name.Original}}` entrypoint.
func {{$rb}} {{.Name.Normalized}}Op({{range .Args}}{{printf "%s %s," .Name.Normalized .Type.GoType}}{{end}}) string {
    return prim.Builder(){{range .Args}}.{{.Type.GoPrim .Name.Normalized}}{{end}}.Finish()
}

{{end}}

// endregion

// region Structs

{{range $root.Structs}}

// {{.Name.Normalized}} is an auto generated struct used in {{$contract}} smart contract.
type {{.Name.Normalized}} struct { {{range .Fields}}
    {{.Name.Normalized}} {{.Type.GoType}}{{end}}
}

// ToPrim returns the micheline code to represent {{.Name.Normalized}}.
func (s *{{.Name.Normalized}}) ToPrim() string {
    return prim.Builder(){{range .Fields}}.{{print  "s." .Name.Normalized | .Type.GoPrim}}{{end}}.Finish()
}

{{end}}

// endregion

// region Unions

{{range $root.Unions}}

// {{.Name.Normalized}} is an auto generated union struct used in {{$contract}} smart contract.
type {{.Name.Normalized}} struct {
    prim.UnionBranch
    L {{.LType.GoType}}
    R {{.RType.GoType}}
}

// NewLeft{{.Name.Normalized}} returns a left {{.Name.Normalized}}.
func NewLeft{{.Name.Normalized}}(l {{.LType.GoType}}) *{{.Name.Normalized}} {
    return &{{.Name.Normalized}}{L: l, UnionBranch: prim.LeftBranch}
}

// NewRight{{.Name.Normalized}} returns a right {{.Name.Normalized}}.
func NewRight{{.Name.Normalized}}(r {{.RType.GoType}}) *{{.Name.Normalized}} {
    return &{{.Name.Normalized}}{R: r, UnionBranch: prim.RightBranch}
}

// ToPrim returns the micheline code to represent {{.Name.Normalized}}.
func (u *{{.Name.Normalized}}) ToPrim() string {
    if u.IsLeft() {
        return prim.Builder().Union(u.L, u.UnionBranch).Finish()
    }
    return prim.Builder().Union(u.R, u.UnionBranch).Finish()
}

{{end}}

// endregion

// region Options

{{range $root.Options}}

// {{.Name.Normalized}} is an auto generated option struct used in {{$contract}} smart contract.
type {{.Name.Normalized}} struct {
    v {{.Type.GoType}}
    isSome bool
}

// Some{{.Name.Normalized}} returns a Some value for {{.Name.Normalized}}.
func Some{{.Name.Normalized}}(v {{.Type.GoType}}) *{{.Name.Normalized}} {
    return &{{.Name.Normalized}}{v: v, isSome: true}
}

// None{{.Name.Normalized}} returns the None value for {{.Name.Normalized}}.
func None{{.Name.Normalized}}() *{{.Name.Normalized}} {
    return &{{.Name.Normalized}}{isSome: false}
}

func (o *{{.Name.Normalized}}) IsSome() bool {
    return o.isSome
}

// TryGet returns o's underlying value if it is Some, or prim.ErrNone if it is None.
func (o *{{.Name.Normalized}}) TryGet() (val {{.Type.GoType}}, err error) {
    if o.IsSome() {
        return o.v, nil
    }
    return val, prim.ErrNone
}

// ToPrim returns the micheline code to represent {{.Name.Normalized}}.
func (o *{{.Name.Normalized}}) ToPrim() string {
    if o.IsSome() {
        return prim.Builder().Some(o.v).Finish()
    }
    return prim.Builder().None().Finish()
}

{{end}}

// endregion

// {{.Name}}Micheline is the input Micheline used to generate the binding.
const {{.Name}}Micheline = `{{.Micheline}}`

var (
    _ = big.NewInt
)

{{end}}
