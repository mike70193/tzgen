{{- define "entryParamsList" -}}
    {{- range .Params}}{{camel .Name}} {{type .Type}},{{end -}}
{{- end -}}

{{- define "originalSignature" -}}
    {{- $nArgs := len .Params -}}
	{{.Name}}({{range $i, $param := .Params}}{{$param.Name}} {{$param.OriginalType}}{{if lt $i (sub $nArgs 1)}}, {{end}}{{end}})
{{- end -}}

{{- /*gotype: github.com/jeanschmitt/tzgen/internal/generate.Data*/ -}}

// Code generated by tzgen - DO NOT EDIT.
// This file is a binding generated from {{.Contract.Name}} smart contract{{if ne .Address ""}} at address {{.Address}}{{end}}.
// Any manual changes will be lost.

package {{.Package}}

import (
	"context"
	"math/big"

	"blockwatch.cc/tzgo/contract"
	"blockwatch.cc/tzgo/micheline"
	"blockwatch.cc/tzgo/rpc"
	"blockwatch.cc/tzgo/tezos"

	"github.com/jeanschmitt/tzgen/pkg/either"
	"github.com/jeanschmitt/tzgen/pkg/option"
	"github.com/jeanschmitt/tzgen/pkg/tzgoext"
	"github.com/pkg/errors"
)

{{$contract := pascal .Contract.Name}}
{{$r := receiver $contract}}
{{$rg := printf "(%s *%s)" $r $contract}}

{{with .Contract -}}

type {{$contract}} struct {
	*contract.Contract
	// Default signer to use when sending transactions.
	// Can be overridden in entrypoints' opts argument.
	signer *tzgoext.Signer
}

func New{{$contract}}(address tezos.Address, client *rpc.Client) *{{$contract}} {
	return &{{$contract}}{
		Contract: contract.NewContract(address, client),
	}
}

func {{$rg}} SetSigner(signer *tzgoext.Signer) *{{$contract}} {
	{{$r}}.signer = signer
	return {{$r}}
}

func {{$rg}} source() tezos.Address {
	if {{$r}}.signer == nil {
		return tezos.Address{}
	}
	addr, _ := {{$r}}.signer.Address(context.Background())
	return addr
}

// region Entrypoints

{{range .Entrypoints}}

// {{pascal .Name}} is a contract entry.
// {{template "originalSignature" .}}
func {{$rg}} {{pascal .Name}}(ctx context.Context, opts *contract.CallOptions, {{template "entryParamsList" .}}) (*rpc.Receipt, error) {
	prim, err := tzgoext.MarshalParams({{range .Params}}{{camel .Name}},{{end}})
	if err != nil {
		return nil, errors.Wrap(err, "failed to marshal params")
	}
	return {{$r}}.Contract.Call(ctx, &tzgoext.CallArgs{
		TxArgs: contract.TxArgs{Destination: {{$r}}.Address(), Source: {{$r}}.source()},
		Entrypoint: "{{.Name}}",
		Value: prim,
	}, opts)
}

{{end}}

// endregion

// region Getters

{{range .Getters}}

// {{pascal .Name}} is a TZIP-4 view.
// {{template "originalSignature" .}}
func {{$rg}} {{pascal .Name}}(ctx context.Context, {{template "entryParamsList" .}}) (v {{type .ReturnType}}, err error) {
	prim, err := tzgoext.MarshalParams({{range .Params}}{{camel .Name}},{{end}})
	if err != nil {
		return v, errors.Wrap(err, "failed to marshal params")
	}
	res, err := {{$r}}.Contract.RunView(ctx, "{{.Name}}", prim)
	if err != nil {
		return v, err
	}
	if err = tzgoext.UnmarshalPrim(res, &v); err != nil {
		return v, errors.Wrap(err, "failed to unmarshal res")
	}
	return v, nil
}

{{end}}

// endregion

{{- end}}

{{range .Structs}}

{{$rs := printf "(%s *%s)" $r (pascal .Name)}}

type {{pascal .Name}} struct {
	{{range .Fields}}
		{{pascal .Name}} {{type .Type}}
	{{- end}}
}

func {{$rs}} MarshalPrim() (micheline.Prim, error) {
	return tzgoext.MarshalParams({{range .Fields}}{{$r}}.{{pascal .Name}},{{end}})
}

func {{$rs}} UnmarshalPrim(micheline.Prim) error {
	return nil
}

{{end}}

const {{$contract}}Micheline = `{{.Contract.Micheline}}`

var (
	_ = big.NewInt
	_ = either.Left[int, int]
	_ = micheline.NewPrim
	_ = option.Some[int]
)
